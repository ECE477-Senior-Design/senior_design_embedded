
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08007d28  08007d28  00017d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f90  08007f90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f90  08007f90  00017f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f98  08007f98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f98  08007f98  00017f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f9c  08007f9c  00017f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000624  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000630  20000630  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c708  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bfa  00000000  00000000  0002c787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d28  00000000  00000000  0002e388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a5a  00000000  00000000  0002f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f229  00000000  00000000  0002fb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f529  00000000  00000000  0004ed33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c0b4c  00000000  00000000  0005e25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c58  00000000  00000000  0011eda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00122a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d10 	.word	0x08007d10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007d10 	.word	0x08007d10

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b970 	b.w	8000e9c <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	460d      	mov	r5, r1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	460f      	mov	r7, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14a      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4694      	mov	ip, r2
 8000be8:	d965      	bls.n	8000cb6 <__udivmoddi4+0xe2>
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	b143      	cbz	r3, 8000c02 <__udivmoddi4+0x2e>
 8000bf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf4:	f1c3 0220 	rsb	r2, r3, #32
 8000bf8:	409f      	lsls	r7, r3
 8000bfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfe:	4317      	orrs	r7, r2
 8000c00:	409c      	lsls	r4, r3
 8000c02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c06:	fa1f f58c 	uxth.w	r5, ip
 8000c0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0e:	0c22      	lsrs	r2, r4, #16
 8000c10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c18:	fb01 f005 	mul.w	r0, r1, r5
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x62>
 8000c20:	eb1c 0202 	adds.w	r2, ip, r2
 8000c24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c28:	f080 811c 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	f240 8119 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c32:	3902      	subs	r1, #2
 8000c34:	4462      	add	r2, ip
 8000c36:	1a12      	subs	r2, r2, r0
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c46:	fb00 f505 	mul.w	r5, r0, r5
 8000c4a:	42a5      	cmp	r5, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x90>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x294>
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x294>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11e      	cbz	r6, 8000c76 <__udivmoddi4+0xa2>
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	e9c6 4300 	strd	r4, r3, [r6]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0xbc>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80ed 	beq.w	8000e5e <__udivmoddi4+0x28a>
 8000c84:	2100      	movs	r1, #0
 8000c86:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d149      	bne.n	8000d2c <__udivmoddi4+0x158>
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d302      	bcc.n	8000ca2 <__udivmoddi4+0xce>
 8000c9c:	4282      	cmp	r2, r0
 8000c9e:	f200 80f8 	bhi.w	8000e92 <__udivmoddi4+0x2be>
 8000ca2:	1a84      	subs	r4, r0, r2
 8000ca4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4617      	mov	r7, r2
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d0e2      	beq.n	8000c76 <__udivmoddi4+0xa2>
 8000cb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb4:	e7df      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000cb6:	b902      	cbnz	r2, 8000cba <__udivmoddi4+0xe6>
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8090 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd8:	0c22      	lsrs	r2, r4, #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb0e f005 	mul.w	r0, lr, r5
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2b8>
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	1a12      	subs	r2, r2, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d00:	fb07 2210 	mls	r2, r7, r0, r2
 8000d04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x14e>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x14c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2c2>
 8000d20:	4610      	mov	r0, r2
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2a:	e79f      	b.n	8000c6c <__udivmoddi4+0x98>
 8000d2c:	f1c1 0720 	rsb	r7, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d42:	40fd      	lsrs	r5, r7
 8000d44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	fb09 5518 	mls	r5, r9, r8, r5
 8000d56:	0c1c      	lsrs	r4, r3, #16
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2b4>
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2b4>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4464      	add	r4, ip
 8000d84:	1b64      	subs	r4, r4, r5
 8000d86:	b29d      	uxth	r5, r3
 8000d88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2ac>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2ac>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	4464      	add	r4, ip
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fba3 9502 	umull	r9, r5, r3, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46ae      	mov	lr, r5
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x29c>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x298>
 8000dc4:	b156      	cbz	r6, 8000ddc <__udivmoddi4+0x208>
 8000dc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dca:	eb64 040e 	sbc.w	r4, r4, lr
 8000dce:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd2:	40ca      	lsrs	r2, r1
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	f1c3 0120 	rsb	r1, r3, #32
 8000de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dec:	fa20 f201 	lsr.w	r2, r0, r1
 8000df0:	fa25 f101 	lsr.w	r1, r5, r1
 8000df4:	409d      	lsls	r5, r3
 8000df6:	432a      	orrs	r2, r5
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1510 	mls	r5, r7, r0, r1
 8000e08:	0c11      	lsrs	r1, r2, #16
 8000e0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e12:	428d      	cmp	r5, r1
 8000e14:	fa04 f403 	lsl.w	r4, r4, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x258>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b0>
 8000e24:	428d      	cmp	r5, r1
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b0>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4461      	add	r1, ip
 8000e2c:	1b49      	subs	r1, r1, r5
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e34:	fb07 1115 	mls	r1, r7, r5, r1
 8000e38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e40:	4291      	cmp	r1, r2
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x282>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2a8>
 8000e4e:	4291      	cmp	r1, r2
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2a8>
 8000e52:	3d02      	subs	r5, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a52      	subs	r2, r2, r1
 8000e58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0xfc>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000e64:	4639      	mov	r1, r7
 8000e66:	e6e6      	b.n	8000c36 <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x90>
 8000e6c:	4548      	cmp	r0, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7c:	4645      	mov	r5, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x282>
 8000e80:	462b      	mov	r3, r5
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x258>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8c:	3d02      	subs	r5, #2
 8000e8e:	4462      	add	r2, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e70a      	b.n	8000cac <__udivmoddi4+0xd8>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x14e>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <Set_LED>:

//functions


void Set_LED(int LEDnum, int Red, int Green, int Blue)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	b2d9      	uxtb	r1, r3
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <Set_LED+0x58>)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	b2d9      	uxtb	r1, r3
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <Set_LED+0x58>)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	460a      	mov	r2, r1
 8000ec8:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	b2d9      	uxtb	r1, r3
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <Set_LED+0x58>)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	460a      	mov	r2, r1
 8000ed8:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2d9      	uxtb	r1, r3
 8000ede:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <Set_LED+0x58>)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	460a      	mov	r2, r1
 8000ee8:	70da      	strb	r2, [r3, #3]
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000028 	.word	0x20000028
 8000efc:	00000000 	.word	0x00000000

08000f00 <Set_Brightness>:


void Set_Brightness(int brightness)
{
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
	if (brightness > 45) brightness = 45;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b2d      	cmp	r3, #45	; 0x2d
 8000f0c:	dd01      	ble.n	8000f12 <Set_Brightness+0x12>
 8000f0e:	232d      	movs	r3, #45	; 0x2d
 8000f10:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e060      	b.n	8000fda <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8000f18:	4a37      	ldr	r2, [pc, #220]	; (8000ff8 <Set_Brightness+0xf8>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000f20:	4a36      	ldr	r2, [pc, #216]	; (8000ffc <Set_Brightness+0xfc>)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j< 4; j++)
 8000f28:	2301      	movs	r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	e04f      	b.n	8000fce <Set_Brightness+0xce>
		{
			float angle = 90-brightness; //in degrees
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3c:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  //in rad
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f7ff faa5 	bl	8000490 <__aeabi_f2d>
 8000f46:	a32a      	add	r3, pc, #168	; (adr r3, 8000ff0 <Set_Brightness+0xf0>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff faf8 	bl	8000540 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	4b28      	ldr	r3, [pc, #160]	; (8001000 <Set_Brightness+0x100>)
 8000f5e:	f7ff fc19 	bl	8000794 <__aeabi_ddiv>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f7ff fdcb 	bl	8000b04 <__aeabi_d2f>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8000f72:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <Set_Brightness+0xf8>)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	441a      	add	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fa73 	bl	800046c <__aeabi_i2d>
 8000f86:	4604      	mov	r4, r0
 8000f88:	460d      	mov	r5, r1
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f7ff fa80 	bl	8000490 <__aeabi_f2d>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	ec43 2b10 	vmov	d0, r2, r3
 8000f98:	f005 fdee 	bl	8006b78 <tan>
 8000f9c:	ec53 2b10 	vmov	r2, r3, d0
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	f7ff fbf6 	bl	8000794 <__aeabi_ddiv>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fd88 	bl	8000ac4 <__aeabi_d2uiz>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b2d9      	uxtb	r1, r3
 8000fb8:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <Set_Brightness+0xfc>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	441a      	add	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	701a      	strb	r2, [r3, #0]
		for (int j=1; j< 4; j++)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	ddac      	ble.n	8000f2e <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	dd9b      	ble.n	8000f18 <Set_Brightness+0x18>

		}
	}

#endif
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	f3af 8000 	nop.w
 8000ff0:	53c8d4f1 	.word	0x53c8d4f1
 8000ff4:	400921fb 	.word	0x400921fb
 8000ff8:	20000028 	.word	0x20000028
 8000ffc:	20000068 	.word	0x20000068
 8001000:	40668000 	.word	0x40668000

08001004 <WS2812_Send>:

void WS2812_Send (TIM_HandleTypeDef* htim1, int channelNum)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b08d      	sub	sp, #52	; 0x34
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	uint32_t indx=0;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t color;
	unsigned int channels[] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
 8001012:	4b36      	ldr	r3, [pc, #216]	; (80010ec <WS2812_Send+0xe8>)
 8001014:	f107 040c 	add.w	r4, r7, #12
 8001018:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800101a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for (int i= 0; i<MAX_LED; i++)
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
 8001022:	e036      	b.n	8001092 <WS2812_Send+0x8e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8001024:	4a32      	ldr	r2, [pc, #200]	; (80010f0 <WS2812_Send+0xec>)
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	785b      	ldrb	r3, [r3, #1]
 800102e:	041a      	lsls	r2, r3, #16
 8001030:	492f      	ldr	r1, [pc, #188]	; (80010f0 <WS2812_Send+0xec>)
 8001032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	789b      	ldrb	r3, [r3, #2]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	431a      	orrs	r2, r3
 800103e:	492c      	ldr	r1, [pc, #176]	; (80010f0 <WS2812_Send+0xec>)
 8001040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	78db      	ldrb	r3, [r3, #3]
 8001048:	4313      	orrs	r3, r2
 800104a:	61fb      	str	r3, [r7, #28]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 800104c:	2317      	movs	r3, #23
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
 8001050:	e019      	b.n	8001086 <WS2812_Send+0x82>
		{
			if (color&(1<<i))
 8001052:	2201      	movs	r2, #1
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	461a      	mov	r2, r3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <WS2812_Send+0x6c>
			{
				pwmData[indx] = 40; //14;// 2/3 of 20 = 16MHz / 800kHz  // 2/3 of 105 = 84MHz / 800kHz
 8001064:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <WS2812_Send+0xf0>)
 8001066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001068:	2128      	movs	r1, #40	; 0x28
 800106a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800106e:	e004      	b.n	800107a <WS2812_Send+0x76>
			}

			else pwmData[indx] = 20; //7; // 1/3 of 20 = 16MHz / 800kHz // 1/3 of 105 = 84MHz / 800kHz
 8001070:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <WS2812_Send+0xf0>)
 8001072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001074:	2114      	movs	r1, #20
 8001076:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107c:	3301      	adds	r3, #1
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i=23; i>=0; i--)
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	3b01      	subs	r3, #1
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	2b00      	cmp	r3, #0
 800108a:	dae2      	bge.n	8001052 <WS2812_Send+0x4e>
	for (int i= 0; i<MAX_LED; i++)
 800108c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108e:	3301      	adds	r3, #1
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
 8001092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001094:	2b0f      	cmp	r3, #15
 8001096:	ddc5      	ble.n	8001024 <WS2812_Send+0x20>
		}

	}

	//reset code see datasheet
	for (int i=0; i<50; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
 800109c:	e00a      	b.n	80010b4 <WS2812_Send+0xb0>
	{
		pwmData[indx] = 0;
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <WS2812_Send+0xf0>)
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	2100      	movs	r1, #0
 80010a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	3301      	adds	r3, #1
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i=0; i<50; i++)
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	3301      	adds	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	6a3b      	ldr	r3, [r7, #32]
 80010b6:	2b31      	cmp	r3, #49	; 0x31
 80010b8:	ddf1      	ble.n	800109e <WS2812_Send+0x9a>
	}
	//channels[channelNum-1]
	HAL_TIM_PWM_Start_DMA(htim1, channels[channelNum-1], (uint32_t *)pwmData, indx);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	3b01      	subs	r3, #1
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	3330      	adds	r3, #48	; 0x30
 80010c2:	443b      	add	r3, r7
 80010c4:	f853 1c24 	ldr.w	r1, [r3, #-36]
 80010c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <WS2812_Send+0xf0>)
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f004 fdc0 	bl	8005c54 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 80010d4:	bf00      	nop
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <WS2812_Send+0xf4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0fb      	beq.n	80010d6 <WS2812_Send+0xd2>
	datasentflag = 0;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <WS2812_Send+0xf4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	3734      	adds	r7, #52	; 0x34
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd90      	pop	{r4, r7, pc}
 80010ec:	08007d28 	.word	0x08007d28
 80010f0:	20000068 	.word	0x20000068
 80010f4:	200000ac 	.word	0x200000ac
 80010f8:	200000a8 	.word	0x200000a8

080010fc <mcp23017_init>:


 //Functions

 void mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c, uint16_t addr)
 {
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	4613      	mov	r3, r2
 8001108:	80fb      	strh	r3, [r7, #6]
 	hdev->hi2c = hi2c;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	601a      	str	r2, [r3, #0]
 	hdev->addr = addr << 1;
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	b29a      	uxth	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	809a      	strh	r2, [r3, #4]
 }
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <mcp23017_read>:

HAL_StatusTypeDef mcp23017_read(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b088      	sub	sp, #32
 800112a:	af04      	add	r7, sp, #16
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	460b      	mov	r3, r1
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	817b      	strh	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8899      	ldrh	r1, [r3, #4]
 800113c:	897a      	ldrh	r2, [r7, #10]
 800113e:	2364      	movs	r3, #100	; 0x64
 8001140:	9302      	str	r3, [sp, #8]
 8001142:	2301      	movs	r3, #1
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2301      	movs	r3, #1
 800114c:	f001 ff06 	bl	8002f5c <HAL_I2C_Mem_Read>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <mcp23017_write>:

HAL_StatusTypeDef mcp23017_write(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b088      	sub	sp, #32
 800115e:	af04      	add	r7, sp, #16
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	460b      	mov	r3, r1
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	817b      	strh	r3, [r7, #10]
	return HAL_I2C_Mem_Write(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	8899      	ldrh	r1, [r3, #4]
 8001170:	897a      	ldrh	r2, [r7, #10]
 8001172:	2364      	movs	r3, #100	; 0x64
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2301      	movs	r3, #1
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2301      	movs	r3, #1
 8001180:	f001 fdf2 	bl	8002d68 <HAL_I2C_Mem_Write>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <mcp23017_iodir>:

 HAL_StatusTypeDef mcp23017_iodir(MCP23017_HandleTypeDef *hdev, uint8_t port, uint8_t iodir)
 {
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	460b      	mov	r3, r1
 8001198:	70fb      	strb	r3, [r7, #3]
 800119a:	4613      	mov	r3, r2
 800119c:	70bb      	strb	r3, [r7, #2]
 	uint8_t data[1] = {iodir};
 800119e:	78bb      	ldrb	r3, [r7, #2]
 80011a0:	733b      	strb	r3, [r7, #12]
 	return mcp23017_write(hdev, REGISTER_IODIRA|port, data);
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	f107 020c 	add.w	r2, r7, #12
 80011aa:	4619      	mov	r1, r3
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffd4 	bl	800115a <mcp23017_write>
 80011b2:	4603      	mov	r3, r0
 }
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <mcp23017_read_gpio>:

 HAL_StatusTypeDef mcp23017_read_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
 {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
 	uint8_t data[1];
 	HAL_StatusTypeDef status;
 	status = mcp23017_read(hdev, REGISTER_GPIOA|port, data);
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	f043 0312 	orr.w	r3, r3, #18
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	f107 020c 	add.w	r2, r7, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ffa4 	bl	8001126 <mcp23017_read>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
 	if (status == HAL_OK)
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d105      	bne.n	80011f4 <mcp23017_read_gpio+0x38>
 		hdev->gpio[port] = data[0];
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	7b39      	ldrb	r1, [r7, #12]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	460a      	mov	r2, r1
 80011f2:	719a      	strb	r2, [r3, #6]
 	return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 }
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <ledHallPCBSystemCheck>:




 void ledHallPCBSystemCheck(MCP23017_HandleTypeDef hmcp,TIM_HandleTypeDef* htim1, int channelNum){
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b089      	sub	sp, #36	; 0x24
 8001202:	af00      	add	r7, sp, #0
 8001204:	f107 0408 	add.w	r4, r7, #8
 8001208:	e884 0003 	stmia.w	r4, {r0, r1}
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	603b      	str	r3, [r7, #0]
 	//int size = numExpanders;
 	//for(int board = 0; board < 1; board++){
	mcp23017_read_gpio(&hmcp, MCP23017_PORTA);
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ffd0 	bl	80011bc <mcp23017_read_gpio>
	mcp23017_read_gpio(&hmcp, MCP23017_PORTB);
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	2101      	movs	r1, #1
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ffca 	bl	80011bc <mcp23017_read_gpio>
	for(int port=0; port<2; port++){ //port used in place of MCP23017_PORTA and MCP23017_PORTB- corresponding to 0x00 and 0x01
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	e02d      	b.n	800128a <ledHallPCBSystemCheck+0x8c>
		for (int i=0; i<8; i++){
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	e024      	b.n	800127e <ledHallPCBSystemCheck+0x80>
			int mask = 1 << i;
 8001234:	2201      	movs	r2, #1
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
			if((hmcp.gpio[port] & mask) != 0){
 800123e:	f107 020e 	add.w	r2, r7, #14
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	4413      	add	r3, r2
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <ledHallPCBSystemCheck+0x68>
				Set_LED(i + (8*port),250,0,0);
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	00da      	lsls	r2, r3, #3
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	18d0      	adds	r0, r2, r3
 800125a:	2300      	movs	r3, #0
 800125c:	2200      	movs	r2, #0
 800125e:	21fa      	movs	r1, #250	; 0xfa
 8001260:	f7ff fe1e 	bl	8000ea0 <Set_LED>
 8001264:	e008      	b.n	8001278 <ledHallPCBSystemCheck+0x7a>
			}
			else{
				Set_LED(i + (8*port),0,250,0);
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	00da      	lsls	r2, r3, #3
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	18d0      	adds	r0, r2, r3
 800126e:	2300      	movs	r3, #0
 8001270:	22fa      	movs	r2, #250	; 0xfa
 8001272:	2100      	movs	r1, #0
 8001274:	f7ff fe14 	bl	8000ea0 <Set_LED>
		for (int i=0; i<8; i++){
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	3301      	adds	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	2b07      	cmp	r3, #7
 8001282:	ddd7      	ble.n	8001234 <ledHallPCBSystemCheck+0x36>
	for(int port=0; port<2; port++){ //port used in place of MCP23017_PORTA and MCP23017_PORTB- corresponding to 0x00 and 0x01
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	3301      	adds	r3, #1
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	2b01      	cmp	r3, #1
 800128e:	ddce      	ble.n	800122e <ledHallPCBSystemCheck+0x30>
			}
		}
	}

 	//}
 	Set_Brightness(20);
 8001290:	2014      	movs	r0, #20
 8001292:	f7ff fe35 	bl	8000f00 <Set_Brightness>
 	WS2812_Send(htim1,channelNum);
 8001296:	6839      	ldr	r1, [r7, #0]
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff feb3 	bl	8001004 <WS2812_Send>

 }
 800129e:	bf00      	nop
 80012a0:	3724      	adds	r7, #36	; 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
	...

080012a8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80012b0:	2100      	movs	r1, #0
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80012b4:	f004 fe96 	bl	8005fe4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000464 	.word	0x20000464
 80012cc:	200000a8 	.word	0x200000a8

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012d4:	b09e      	sub	sp, #120	; 0x78
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d8:	f000 fd08 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012dc:	f000 f910 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e0:	f000 fa82 	bl	80017e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80012e4:	f000 fa48 	bl	8001778 <MX_DMA_Init>
  MX_I2C1_Init();
 80012e8:	f000 f972 	bl	80015d0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80012ec:	f000 f99e 	bl	800162c <MX_TIM1_Init>
//  mcp23017_iodir(&hmcps[0], MCP23017_PORTB, MCP23017_IODIR_ALL_INPUT);
  //int numExpanders = 1;
  //MCP23017_HandleTypeDef hmcps[1];
 //mcp23017_init_array(&hmcps,numExpanders,hi2c1); //number of expanders,i2c system used

  int numExpanders = 3;
 80012f0:	2303      	movs	r3, #3
 80012f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  unsigned int mcpAddress[] = {MCP23017_ADDRESS_20, MCP23017_ADDRESS_21,MCP23017_ADDRESS_22,MCP23017_ADDRESS_23,MCP23017_ADDRESS_24,MCP23017_ADDRESS_25,MCP23017_ADDRESS_26,MCP23017_ADDRESS_27};
 80012f4:	4b7e      	ldr	r3, [pc, #504]	; (80014f0 <main+0x220>)
 80012f6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80012fa:	461d      	mov	r5, r3
 80012fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001300:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int channels[] = {1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4};
 8001308:	4b7a      	ldr	r3, [pc, #488]	; (80014f4 <main+0x224>)
 800130a:	1d3c      	adds	r4, r7, #4
 800130c:	461d      	mov	r5, r3
 800130e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800131e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MCP23017_HandleTypeDef hmcps[numExpanders];
 8001322:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001324:	1e4b      	subs	r3, r1, #1
 8001326:	66bb      	str	r3, [r7, #104]	; 0x68
 8001328:	460a      	mov	r2, r1
 800132a:	2300      	movs	r3, #0
 800132c:	4692      	mov	sl, r2
 800132e:	469b      	mov	fp, r3
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800133c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001340:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001344:	460a      	mov	r2, r1
 8001346:	2300      	movs	r3, #0
 8001348:	4690      	mov	r8, r2
 800134a:	4699      	mov	r9, r3
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001358:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800135c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001360:	460b      	mov	r3, r1
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	3307      	adds	r3, #7
 8001366:	08db      	lsrs	r3, r3, #3
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	ebad 0d03 	sub.w	sp, sp, r3
 800136e:	466b      	mov	r3, sp
 8001370:	3303      	adds	r3, #3
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	667b      	str	r3, [r7, #100]	; 0x64
  for(int i = 0; i < numExpanders; i++){
 8001378:	2300      	movs	r3, #0
 800137a:	677b      	str	r3, [r7, #116]	; 0x74
 800137c:	e023      	b.n	80013c6 <main+0xf6>
	  mcp23017_init(&hmcps[i], &hi2c1, mcpAddress[i]);
 800137e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001384:	18d0      	adds	r0, r2, r3
 8001386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	3378      	adds	r3, #120	; 0x78
 800138c:	443b      	add	r3, r7
 800138e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001392:	b29b      	uxth	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	4958      	ldr	r1, [pc, #352]	; (80014f8 <main+0x228>)
 8001398:	f7ff feb0 	bl	80010fc <mcp23017_init>
	  mcp23017_iodir(&hmcps[i], MCP23017_PORTA, MCP23017_IODIR_ALL_INPUT);
 800139c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80013a2:	4413      	add	r3, r2
 80013a4:	22ff      	movs	r2, #255	; 0xff
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fef0 	bl	800118e <mcp23017_iodir>
	  mcp23017_iodir(&hmcps[i], MCP23017_PORTB, MCP23017_IODIR_ALL_INPUT);
 80013ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80013b4:	4413      	add	r3, r2
 80013b6:	22ff      	movs	r2, #255	; 0xff
 80013b8:	2101      	movs	r1, #1
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fee7 	bl	800118e <mcp23017_iodir>
  for(int i = 0; i < numExpanders; i++){
 80013c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013c2:	3301      	adds	r3, #1
 80013c4:	677b      	str	r3, [r7, #116]	; 0x74
 80013c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80013c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dbd7      	blt.n	800137e <main+0xae>
  }



	Set_LED(0,255,0,0);
 80013ce:	2300      	movs	r3, #0
 80013d0:	2200      	movs	r2, #0
 80013d2:	21ff      	movs	r1, #255	; 0xff
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fd63 	bl	8000ea0 <Set_LED>
	Set_LED(1,0,255,0);
 80013da:	2300      	movs	r3, #0
 80013dc:	22ff      	movs	r2, #255	; 0xff
 80013de:	2100      	movs	r1, #0
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff fd5d 	bl	8000ea0 <Set_LED>
	Set_LED(2,0,0,255);
 80013e6:	23ff      	movs	r3, #255	; 0xff
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2002      	movs	r0, #2
 80013ee:	f7ff fd57 	bl	8000ea0 <Set_LED>
	Set_LED(3,255,0,0);
 80013f2:	2300      	movs	r3, #0
 80013f4:	2200      	movs	r2, #0
 80013f6:	21ff      	movs	r1, #255	; 0xff
 80013f8:	2003      	movs	r0, #3
 80013fa:	f7ff fd51 	bl	8000ea0 <Set_LED>
	Set_LED(4,0,255,0);
 80013fe:	2300      	movs	r3, #0
 8001400:	22ff      	movs	r2, #255	; 0xff
 8001402:	2100      	movs	r1, #0
 8001404:	2004      	movs	r0, #4
 8001406:	f7ff fd4b 	bl	8000ea0 <Set_LED>
	Set_LED(5,0,0,255);
 800140a:	23ff      	movs	r3, #255	; 0xff
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2005      	movs	r0, #5
 8001412:	f7ff fd45 	bl	8000ea0 <Set_LED>
	Set_LED(6,255,0,0);
 8001416:	2300      	movs	r3, #0
 8001418:	2200      	movs	r2, #0
 800141a:	21ff      	movs	r1, #255	; 0xff
 800141c:	2006      	movs	r0, #6
 800141e:	f7ff fd3f 	bl	8000ea0 <Set_LED>
	Set_LED(7,0,255,0);
 8001422:	2300      	movs	r3, #0
 8001424:	22ff      	movs	r2, #255	; 0xff
 8001426:	2100      	movs	r1, #0
 8001428:	2007      	movs	r0, #7
 800142a:	f7ff fd39 	bl	8000ea0 <Set_LED>
	Set_LED(8,0,0,255);
 800142e:	23ff      	movs	r3, #255	; 0xff
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2008      	movs	r0, #8
 8001436:	f7ff fd33 	bl	8000ea0 <Set_LED>
	Set_LED(9,255,0,0);
 800143a:	2300      	movs	r3, #0
 800143c:	2200      	movs	r2, #0
 800143e:	21ff      	movs	r1, #255	; 0xff
 8001440:	2009      	movs	r0, #9
 8001442:	f7ff fd2d 	bl	8000ea0 <Set_LED>
	Set_LED(10,0,255,0);
 8001446:	2300      	movs	r3, #0
 8001448:	22ff      	movs	r2, #255	; 0xff
 800144a:	2100      	movs	r1, #0
 800144c:	200a      	movs	r0, #10
 800144e:	f7ff fd27 	bl	8000ea0 <Set_LED>
	Set_LED(11,0,0,255);
 8001452:	23ff      	movs	r3, #255	; 0xff
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	200b      	movs	r0, #11
 800145a:	f7ff fd21 	bl	8000ea0 <Set_LED>
	Set_LED(12,255,0,0);
 800145e:	2300      	movs	r3, #0
 8001460:	2200      	movs	r2, #0
 8001462:	21ff      	movs	r1, #255	; 0xff
 8001464:	200c      	movs	r0, #12
 8001466:	f7ff fd1b 	bl	8000ea0 <Set_LED>
	Set_LED(13,0,255,0);
 800146a:	2300      	movs	r3, #0
 800146c:	22ff      	movs	r2, #255	; 0xff
 800146e:	2100      	movs	r1, #0
 8001470:	200d      	movs	r0, #13
 8001472:	f7ff fd15 	bl	8000ea0 <Set_LED>
	Set_LED(14,0,0,255);
 8001476:	23ff      	movs	r3, #255	; 0xff
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	200e      	movs	r0, #14
 800147e:	f7ff fd0f 	bl	8000ea0 <Set_LED>
	Set_LED(15,255,0,0);
 8001482:	2300      	movs	r3, #0
 8001484:	2200      	movs	r2, #0
 8001486:	21ff      	movs	r1, #255	; 0xff
 8001488:	200f      	movs	r0, #15
 800148a:	f7ff fd09 	bl	8000ea0 <Set_LED>
	Set_LED(16,0,255,0);
 800148e:	2300      	movs	r3, #0
 8001490:	22ff      	movs	r2, #255	; 0xff
 8001492:	2100      	movs	r1, #0
 8001494:	2010      	movs	r0, #16
 8001496:	f7ff fd03 	bl	8000ea0 <Set_LED>


  Set_Brightness(20);
 800149a:	2014      	movs	r0, #20
 800149c:	f7ff fd30 	bl	8000f00 <Set_Brightness>
  WS2812_Send(&htim1,1);
 80014a0:	2101      	movs	r1, #1
 80014a2:	4816      	ldr	r0, [pc, #88]	; (80014fc <main+0x22c>)
 80014a4:	f7ff fdae 	bl	8001004 <WS2812_Send>
  WS2812_Send(&htim1,2);
 80014a8:	2102      	movs	r1, #2
 80014aa:	4814      	ldr	r0, [pc, #80]	; (80014fc <main+0x22c>)
 80014ac:	f7ff fdaa 	bl	8001004 <WS2812_Send>
  WS2812_Send(&htim1,3);
 80014b0:	2103      	movs	r1, #3
 80014b2:	4812      	ldr	r0, [pc, #72]	; (80014fc <main+0x22c>)
 80014b4:	f7ff fda6 	bl	8001004 <WS2812_Send>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i = 0; i < numExpanders; i++){
 80014b8:	2300      	movs	r3, #0
 80014ba:	673b      	str	r3, [r7, #112]	; 0x70
 80014bc:	e010      	b.n	80014e0 <main+0x210>
		  ledHallPCBSystemCheck(hmcps[i],&htim1,channels[i]); //array of MCP23017s,tim1, channel_1
 80014be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	3378      	adds	r3, #120	; 0x78
 80014c4:	443b      	add	r3, r7
 80014c6:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80014ca:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80014cc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <main+0x22c>)
 80014d0:	00c9      	lsls	r1, r1, #3
 80014d2:	4401      	add	r1, r0
 80014d4:	c903      	ldmia	r1, {r0, r1}
 80014d6:	f7ff fe92 	bl	80011fe <ledHallPCBSystemCheck>
	  for(int i = 0; i < numExpanders; i++){
 80014da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014dc:	3301      	adds	r3, #1
 80014de:	673b      	str	r3, [r7, #112]	; 0x70
 80014e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80014e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbea      	blt.n	80014be <main+0x1ee>


//	  ledHallPCBSystemCheck(hmcps[0],&htim1,channels[0]); //array of MCP23017s,tim1, channel_1
//	  ledHallPCBSystemCheck(hmcps[2],&htim1,channels[2]); //array of MCP23017s,tim1, channel_1

	  HAL_Delay(100);
 80014e8:	2064      	movs	r0, #100	; 0x64
 80014ea:	f000 fc71 	bl	8001dd0 <HAL_Delay>
	  for(int i = 0; i < numExpanders; i++){
 80014ee:	e7e3      	b.n	80014b8 <main+0x1e8>
 80014f0:	08007d38 	.word	0x08007d38
 80014f4:	08007d58 	.word	0x08007d58
 80014f8:	20000410 	.word	0x20000410
 80014fc:	20000464 	.word	0x20000464

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b094      	sub	sp, #80	; 0x50
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0320 	add.w	r3, r7, #32
 800150a:	2230      	movs	r2, #48	; 0x30
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f006 fbd2 	bl	8007cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <SystemClock_Config+0xc8>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	4a26      	ldr	r2, [pc, #152]	; (80015c8 <SystemClock_Config+0xc8>)
 800152e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001532:	6413      	str	r3, [r2, #64]	; 0x40
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <SystemClock_Config+0xc8>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <SystemClock_Config+0xcc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a20      	ldr	r2, [pc, #128]	; (80015cc <SystemClock_Config+0xcc>)
 800154a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <SystemClock_Config+0xcc>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800155c:	2301      	movs	r3, #1
 800155e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001560:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001570:	2308      	movs	r3, #8
 8001572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001574:	23c0      	movs	r3, #192	; 0xc0
 8001576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001578:	2302      	movs	r3, #2
 800157a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800157c:	2304      	movs	r3, #4
 800157e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001580:	f107 0320 	add.w	r3, r7, #32
 8001584:	4618      	mov	r0, r3
 8001586:	f003 fe91 	bl	80052ac <HAL_RCC_OscConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001590:	f000 f960 	bl	8001854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001594:	230f      	movs	r3, #15
 8001596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001598:	2302      	movs	r3, #2
 800159a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	2101      	movs	r1, #1
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 f8f3 	bl	800579c <HAL_RCC_ClockConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015bc:	f000 f94a 	bl	8001854 <Error_Handler>
  }
}
 80015c0:	bf00      	nop
 80015c2:	3750      	adds	r7, #80	; 0x50
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000

080015d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_I2C1_Init+0x50>)
 80015d6:	4a13      	ldr	r2, [pc, #76]	; (8001624 <MX_I2C1_Init+0x54>)
 80015d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_I2C1_Init+0x50>)
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <MX_I2C1_Init+0x58>)
 80015de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_I2C1_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_I2C1_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_I2C1_Init+0x50>)
 80015ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <MX_I2C1_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_I2C1_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <MX_I2C1_Init+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_I2C1_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_I2C1_Init+0x50>)
 800160e:	f001 fa51 	bl	8002ab4 <HAL_I2C_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001618:	f000 f91c 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000410 	.word	0x20000410
 8001624:	40005400 	.word	0x40005400
 8001628:	000186a0 	.word	0x000186a0

0800162c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b092      	sub	sp, #72	; 0x48
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001632:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2220      	movs	r2, #32
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f006 fb2e 	bl	8007cb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800165c:	4b44      	ldr	r3, [pc, #272]	; (8001770 <MX_TIM1_Init+0x144>)
 800165e:	4a45      	ldr	r2, [pc, #276]	; (8001774 <MX_TIM1_Init+0x148>)
 8001660:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001662:	4b43      	ldr	r3, [pc, #268]	; (8001770 <MX_TIM1_Init+0x144>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b41      	ldr	r3, [pc, #260]	; (8001770 <MX_TIM1_Init+0x144>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 105-1;
 800166e:	4b40      	ldr	r3, [pc, #256]	; (8001770 <MX_TIM1_Init+0x144>)
 8001670:	2268      	movs	r2, #104	; 0x68
 8001672:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001674:	4b3e      	ldr	r3, [pc, #248]	; (8001770 <MX_TIM1_Init+0x144>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <MX_TIM1_Init+0x144>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <MX_TIM1_Init+0x144>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001686:	483a      	ldr	r0, [pc, #232]	; (8001770 <MX_TIM1_Init+0x144>)
 8001688:	f004 fa94 	bl	8005bb4 <HAL_TIM_PWM_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001692:	f000 f8df 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800169e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016a2:	4619      	mov	r1, r3
 80016a4:	4832      	ldr	r0, [pc, #200]	; (8001770 <MX_TIM1_Init+0x144>)
 80016a6:	f005 f999 	bl	80069dc <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80016b0:	f000 f8d0 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b4:	2360      	movs	r3, #96	; 0x60
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d4:	2200      	movs	r2, #0
 80016d6:	4619      	mov	r1, r3
 80016d8:	4825      	ldr	r0, [pc, #148]	; (8001770 <MX_TIM1_Init+0x144>)
 80016da:	f004 fd55 	bl	8006188 <HAL_TIM_PWM_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80016e4:	f000 f8b6 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	2204      	movs	r2, #4
 80016ee:	4619      	mov	r1, r3
 80016f0:	481f      	ldr	r0, [pc, #124]	; (8001770 <MX_TIM1_Init+0x144>)
 80016f2:	f004 fd49 	bl	8006188 <HAL_TIM_PWM_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80016fc:	f000 f8aa 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	2208      	movs	r2, #8
 8001706:	4619      	mov	r1, r3
 8001708:	4819      	ldr	r0, [pc, #100]	; (8001770 <MX_TIM1_Init+0x144>)
 800170a:	f004 fd3d 	bl	8006188 <HAL_TIM_PWM_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001714:	f000 f89e 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171c:	220c      	movs	r2, #12
 800171e:	4619      	mov	r1, r3
 8001720:	4813      	ldr	r0, [pc, #76]	; (8001770 <MX_TIM1_Init+0x144>)
 8001722:	f004 fd31 	bl	8006188 <HAL_TIM_PWM_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 800172c:	f000 f892 	bl	8001854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001748:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	4619      	mov	r1, r3
 8001752:	4807      	ldr	r0, [pc, #28]	; (8001770 <MX_TIM1_Init+0x144>)
 8001754:	f005 f9be 	bl	8006ad4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 800175e:	f000 f879 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001762:	4803      	ldr	r0, [pc, #12]	; (8001770 <MX_TIM1_Init+0x144>)
 8001764:	f000 f9f0 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 8001768:	bf00      	nop
 800176a:	3748      	adds	r7, #72	; 0x48
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000464 	.word	0x20000464
 8001774:	40010000 	.word	0x40010000

08001778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_DMA_Init+0x6c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <MX_DMA_Init+0x6c>)
 8001788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <MX_DMA_Init+0x6c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	2039      	movs	r0, #57	; 0x39
 80017a0:	f000 fc15 	bl	8001fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80017a4:	2039      	movs	r0, #57	; 0x39
 80017a6:	f000 fc2e 	bl	8002006 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	203a      	movs	r0, #58	; 0x3a
 80017b0:	f000 fc0d 	bl	8001fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017b4:	203a      	movs	r0, #58	; 0x3a
 80017b6:	f000 fc26 	bl	8002006 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	203c      	movs	r0, #60	; 0x3c
 80017c0:	f000 fc05 	bl	8001fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80017c4:	203c      	movs	r0, #60	; 0x3c
 80017c6:	f000 fc1e 	bl	8002006 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2045      	movs	r0, #69	; 0x45
 80017d0:	f000 fbfd 	bl	8001fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80017d4:	2045      	movs	r0, #69	; 0x45
 80017d6:	f000 fc16 	bl	8002006 <HAL_NVIC_EnableIRQ>

}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <MX_GPIO_Init+0x68>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a16      	ldr	r2, [pc, #88]	; (8001850 <MX_GPIO_Init+0x68>)
 80017f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_GPIO_Init+0x68>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <MX_GPIO_Init+0x68>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <MX_GPIO_Init+0x68>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <MX_GPIO_Init+0x68>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_GPIO_Init+0x68>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <MX_GPIO_Init+0x68>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_GPIO_Init+0x68>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001858:	b672      	cpsid	i
}
 800185a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800185c:	e7fe      	b.n	800185c <Error_Handler+0x8>
	...

08001860 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_MspInit+0x4c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <HAL_MspInit+0x4c>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	6453      	str	r3, [r2, #68]	; 0x44
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_MspInit+0x4c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_MspInit+0x4c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_MspInit+0x4c>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_MspInit+0x4c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_I2C_MspInit+0x94>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d133      	bne.n	800193a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_I2C_MspInit+0x98>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a1b      	ldr	r2, [pc, #108]	; (8001948 <HAL_I2C_MspInit+0x98>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_I2C_MspInit+0x98>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018ee:	23c0      	movs	r3, #192	; 0xc0
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f2:	2312      	movs	r3, #18
 80018f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018fe:	2304      	movs	r3, #4
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4810      	ldr	r0, [pc, #64]	; (800194c <HAL_I2C_MspInit+0x9c>)
 800190a:	f000 ff37 	bl	800277c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_I2C_MspInit+0x98>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <HAL_I2C_MspInit+0x98>)
 8001918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_I2C_MspInit+0x98>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	201f      	movs	r0, #31
 8001930:	f000 fb4d 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001934:	201f      	movs	r0, #31
 8001936:	f000 fb66 	bl	8002006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	3728      	adds	r7, #40	; 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40005400 	.word	0x40005400
 8001948:	40023800 	.word	0x40023800
 800194c:	40020400 	.word	0x40020400

08001950 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a70      	ldr	r2, [pc, #448]	; (8001b20 <HAL_TIM_PWM_MspInit+0x1d0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	f040 80da 	bne.w	8001b18 <HAL_TIM_PWM_MspInit+0x1c8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	4b6e      	ldr	r3, [pc, #440]	; (8001b24 <HAL_TIM_PWM_MspInit+0x1d4>)
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	4a6d      	ldr	r2, [pc, #436]	; (8001b24 <HAL_TIM_PWM_MspInit+0x1d4>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6453      	str	r3, [r2, #68]	; 0x44
 8001974:	4b6b      	ldr	r3, [pc, #428]	; (8001b24 <HAL_TIM_PWM_MspInit+0x1d4>)
 8001976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001980:	4b69      	ldr	r3, [pc, #420]	; (8001b28 <HAL_TIM_PWM_MspInit+0x1d8>)
 8001982:	4a6a      	ldr	r2, [pc, #424]	; (8001b2c <HAL_TIM_PWM_MspInit+0x1dc>)
 8001984:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001986:	4b68      	ldr	r3, [pc, #416]	; (8001b28 <HAL_TIM_PWM_MspInit+0x1d8>)
 8001988:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800198c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800198e:	4b66      	ldr	r3, [pc, #408]	; (8001b28 <HAL_TIM_PWM_MspInit+0x1d8>)
 8001990:	2240      	movs	r2, #64	; 0x40
 8001992:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001994:	4b64      	ldr	r3, [pc, #400]	; (8001b28 <HAL_TIM_PWM_MspInit+0x1d8>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800199a:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_TIM_PWM_MspInit+0x1d8>)
 800199c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019a2:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <HAL_TIM_PWM_MspInit+0x1d8>)
 80019a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019a8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019aa:	4b5f      	ldr	r3, [pc, #380]	; (8001b28 <HAL_TIM_PWM_MspInit+0x1d8>)
 80019ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80019b2:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <HAL_TIM_PWM_MspInit+0x1d8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80019b8:	4b5b      	ldr	r3, [pc, #364]	; (8001b28 <HAL_TIM_PWM_MspInit+0x1d8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019be:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <HAL_TIM_PWM_MspInit+0x1d8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80019c4:	4858      	ldr	r0, [pc, #352]	; (8001b28 <HAL_TIM_PWM_MspInit+0x1d8>)
 80019c6:	f000 fb39 	bl	800203c <HAL_DMA_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 80019d0:	f7ff ff40 	bl	8001854 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a54      	ldr	r2, [pc, #336]	; (8001b28 <HAL_TIM_PWM_MspInit+0x1d8>)
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
 80019da:	4a53      	ldr	r2, [pc, #332]	; (8001b28 <HAL_TIM_PWM_MspInit+0x1d8>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_TIM_PWM_MspInit+0x1e0>)
 80019e2:	4a54      	ldr	r2, [pc, #336]	; (8001b34 <HAL_TIM_PWM_MspInit+0x1e4>)
 80019e4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 80019e6:	4b52      	ldr	r3, [pc, #328]	; (8001b30 <HAL_TIM_PWM_MspInit+0x1e0>)
 80019e8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80019ec:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ee:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <HAL_TIM_PWM_MspInit+0x1e0>)
 80019f0:	2240      	movs	r2, #64	; 0x40
 80019f2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f4:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <HAL_TIM_PWM_MspInit+0x1e0>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80019fa:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <HAL_TIM_PWM_MspInit+0x1e0>)
 80019fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a00:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a02:	4b4b      	ldr	r3, [pc, #300]	; (8001b30 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a08:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a0a:	4b49      	ldr	r3, [pc, #292]	; (8001b30 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001a0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a10:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001a18:	4b45      	ldr	r3, [pc, #276]	; (8001b30 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a1e:	4b44      	ldr	r3, [pc, #272]	; (8001b30 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001a24:	4842      	ldr	r0, [pc, #264]	; (8001b30 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001a26:	f000 fb09 	bl	800203c <HAL_DMA_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_TIM_PWM_MspInit+0xe4>
    {
      Error_Handler();
 8001a30:	f7ff ff10 	bl	8001854 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a3e      	ldr	r2, [pc, #248]	; (8001b30 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
 8001a3a:	4a3d      	ldr	r2, [pc, #244]	; (8001b30 <HAL_TIM_PWM_MspInit+0x1e0>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8001a40:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001a42:	4a3e      	ldr	r2, [pc, #248]	; (8001b3c <HAL_TIM_PWM_MspInit+0x1ec>)
 8001a44:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8001a46:	4b3c      	ldr	r3, [pc, #240]	; (8001b38 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001a48:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001a4c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001a50:	2240      	movs	r2, #64	; 0x40
 8001a52:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a54:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a60:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a62:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a68:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a6a:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001a6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a70:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8001a72:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001a78:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8001a84:	482c      	ldr	r0, [pc, #176]	; (8001b38 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001a86:	f000 fad9 	bl	800203c <HAL_DMA_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_TIM_PWM_MspInit+0x144>
    {
      Error_Handler();
 8001a90:	f7ff fee0 	bl	8001854 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a28      	ldr	r2, [pc, #160]	; (8001b38 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a9a:	4a27      	ldr	r2, [pc, #156]	; (8001b38 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8001aa0:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001aa2:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <HAL_TIM_PWM_MspInit+0x1f4>)
 8001aa4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001aa8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001aac:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001ab0:	2240      	movs	r2, #64	; 0x40
 8001ab2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001abc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ac0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ac8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001acc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ad0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8001ae4:	4816      	ldr	r0, [pc, #88]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001ae6:	f000 faa9 	bl	800203c <HAL_DMA_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_TIM_PWM_MspInit+0x1a4>
    {
      Error_Handler();
 8001af0:	f7ff feb0 	bl	8001854 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001af8:	631a      	str	r2, [r3, #48]	; 0x30
 8001afa:	4a11      	ldr	r2, [pc, #68]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b10:	635a      	str	r2, [r3, #52]	; 0x34
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40023800 	.word	0x40023800
 8001b28:	200004ac 	.word	0x200004ac
 8001b2c:	40026428 	.word	0x40026428
 8001b30:	2000050c 	.word	0x2000050c
 8001b34:	40026440 	.word	0x40026440
 8001b38:	2000056c 	.word	0x2000056c
 8001b3c:	400264a0 	.word	0x400264a0
 8001b40:	200005cc 	.word	0x200005cc
 8001b44:	40026470 	.word	0x40026470

08001b48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <HAL_TIM_MspPostInit+0x68>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d11e      	bne.n	8001ba8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_TIM_MspPostInit+0x6c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <HAL_TIM_MspPostInit+0x6c>)
 8001b74:	f043 0310 	orr.w	r3, r3, #16
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_TIM_MspPostInit+0x6c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001b86:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001b8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <HAL_TIM_MspPostInit+0x70>)
 8001ba4:	f000 fdea 	bl	800277c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40021000 	.word	0x40021000

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <NMI_Handler+0x4>

08001bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <HardFault_Handler+0x4>

08001bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <MemManage_Handler+0x4>

08001bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c08:	f000 f8c2 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <I2C1_EV_IRQHandler+0x10>)
 8001c16:	f001 fbd3 	bl	80033c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000410 	.word	0x20000410

08001c24 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <DMA2_Stream1_IRQHandler+0x10>)
 8001c2a:	f000 fb2f 	bl	800228c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200004ac 	.word	0x200004ac

08001c38 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <DMA2_Stream2_IRQHandler+0x10>)
 8001c3e:	f000 fb25 	bl	800228c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000050c 	.word	0x2000050c

08001c4c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <DMA2_Stream4_IRQHandler+0x10>)
 8001c52:	f000 fb1b 	bl	800228c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200005cc 	.word	0x200005cc

08001c60 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <DMA2_Stream6_IRQHandler+0x10>)
 8001c66:	f000 fb11 	bl	800228c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	2000056c 	.word	0x2000056c

08001c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <SystemInit+0x20>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <SystemInit+0x20>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c9c:	f7ff ffea 	bl	8001c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca0:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ca2:	490d      	ldr	r1, [pc, #52]	; (8001cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb8:	4c0a      	ldr	r4, [pc, #40]	; (8001ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f005 ffff 	bl	8007cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7ff fb01 	bl	80012d0 <main>
  bx  lr    
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001cdc:	08007fa0 	.word	0x08007fa0
  ldr r2, =_sbss
 8001ce0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ce4:	20000630 	.word	0x20000630

08001ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_Init+0x40>)
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_Init+0x40>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_Init+0x40>)
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f000 f94f 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1a:	200f      	movs	r0, #15
 8001d1c:	f000 f808 	bl	8001d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff fd9e 	bl	8001860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_InitTick+0x54>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_InitTick+0x58>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f967 	bl	8002022 <HAL_SYSTICK_Config>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00e      	b.n	8001d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d80a      	bhi.n	8001d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d64:	2200      	movs	r2, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f000 f92f 	bl	8001fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d70:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <HAL_InitTick+0x5c>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_IncTick+0x20>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x24>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <HAL_IncTick+0x24>)
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000008 	.word	0x20000008
 8001db4:	2000062c 	.word	0x2000062c

08001db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_GetTick+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	2000062c 	.word	0x2000062c

08001dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff ffee 	bl	8001db8 <HAL_GetTick>
 8001ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d005      	beq.n	8001df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_Delay+0x44>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df6:	bf00      	nop
 8001df8:	f7ff ffde 	bl	8001db8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d8f7      	bhi.n	8001df8 <HAL_Delay+0x28>
  {
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000008 	.word	0x20000008

08001e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0b      	blt.n	8001ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <__NVIC_EnableIRQ+0x38>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	; (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	; (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f84:	d301      	bcc.n	8001f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <SysTick_Config+0x40>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f92:	210f      	movs	r1, #15
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f7ff ff8e 	bl	8001eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <SysTick_Config+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <SysTick_Config+0x40>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff29 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe0:	f7ff ff3e 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7ff ff8e 	bl	8001f0c <NVIC_EncodePriority>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff5d 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff31 	bl	8001e7c <__NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffa2 	bl	8001f74 <SysTick_Config>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff feb6 	bl	8001db8 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e099      	b.n	800218c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002078:	e00f      	b.n	800209a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800207a:	f7ff fe9d 	bl	8001db8 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b05      	cmp	r3, #5
 8002086:	d908      	bls.n	800209a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2203      	movs	r2, #3
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e078      	b.n	800218c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e8      	bne.n	800207a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4b38      	ldr	r3, [pc, #224]	; (8002194 <HAL_DMA_Init+0x158>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d107      	bne.n	8002104 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4313      	orrs	r3, r2
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f023 0307 	bic.w	r3, r3, #7
 800211a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	2b04      	cmp	r3, #4
 800212c:	d117      	bne.n	800215e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00e      	beq.n	800215e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fa9f 	bl	8002684 <DMA_CheckFifoParam>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2240      	movs	r2, #64	; 0x40
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800215a:	2301      	movs	r3, #1
 800215c:	e016      	b.n	800218c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fa56 	bl	8002618 <DMA_CalcBaseAndBitshift>
 800216c:	4603      	mov	r3, r0
 800216e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	223f      	movs	r2, #63	; 0x3f
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	f010803f 	.word	0xf010803f

08002198 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_DMA_Start_IT+0x26>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e040      	b.n	8002240 <HAL_DMA_Start_IT+0xa8>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d12f      	bne.n	8002232 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f9e8 	bl	80025bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	223f      	movs	r2, #63	; 0x3f
 80021f2:	409a      	lsls	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0216 	orr.w	r2, r2, #22
 8002206:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0208 	orr.w	r2, r2, #8
 800221e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	e005      	b.n	800223e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800223a:	2302      	movs	r3, #2
 800223c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800223e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d004      	beq.n	8002266 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e00c      	b.n	8002280 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2205      	movs	r2, #5
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002298:	4b8e      	ldr	r3, [pc, #568]	; (80024d4 <HAL_DMA_IRQHandler+0x248>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a8e      	ldr	r2, [pc, #568]	; (80024d8 <HAL_DMA_IRQHandler+0x24c>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	0a9b      	lsrs	r3, r3, #10
 80022a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	2208      	movs	r2, #8
 80022b8:	409a      	lsls	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4013      	ands	r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d01a      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d013      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0204 	bic.w	r2, r2, #4
 80022de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e4:	2208      	movs	r2, #8
 80022e6:	409a      	lsls	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	f043 0201 	orr.w	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	2201      	movs	r2, #1
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d012      	beq.n	800232e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231a:	2201      	movs	r2, #1
 800231c:	409a      	lsls	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	f043 0202 	orr.w	r2, r3, #2
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	2204      	movs	r2, #4
 8002334:	409a      	lsls	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4013      	ands	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d012      	beq.n	8002364 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00b      	beq.n	8002364 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002350:	2204      	movs	r2, #4
 8002352:	409a      	lsls	r2, r3
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235c:	f043 0204 	orr.w	r2, r3, #4
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	2210      	movs	r2, #16
 800236a:	409a      	lsls	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d043      	beq.n	80023fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d03c      	beq.n	80023fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002386:	2210      	movs	r2, #16
 8002388:	409a      	lsls	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d018      	beq.n	80023ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d108      	bne.n	80023bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d024      	beq.n	80023fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
 80023ba:	e01f      	b.n	80023fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01b      	beq.n	80023fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
 80023cc:	e016      	b.n	80023fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d107      	bne.n	80023ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0208 	bic.w	r2, r2, #8
 80023ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	2220      	movs	r2, #32
 8002402:	409a      	lsls	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 808f 	beq.w	800252c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 8087 	beq.w	800252c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	2220      	movs	r2, #32
 8002424:	409a      	lsls	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b05      	cmp	r3, #5
 8002434:	d136      	bne.n	80024a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0216 	bic.w	r2, r2, #22
 8002444:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002454:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d103      	bne.n	8002466 <HAL_DMA_IRQHandler+0x1da>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0208 	bic.w	r2, r2, #8
 8002474:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	223f      	movs	r2, #63	; 0x3f
 800247c:	409a      	lsls	r2, r3
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002496:	2b00      	cmp	r3, #0
 8002498:	d07e      	beq.n	8002598 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	4798      	blx	r3
        }
        return;
 80024a2:	e079      	b.n	8002598 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d01d      	beq.n	80024ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d031      	beq.n	800252c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4798      	blx	r3
 80024d0:	e02c      	b.n	800252c <HAL_DMA_IRQHandler+0x2a0>
 80024d2:	bf00      	nop
 80024d4:	20000000 	.word	0x20000000
 80024d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d023      	beq.n	800252c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
 80024ec:	e01e      	b.n	800252c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10f      	bne.n	800251c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0210 	bic.w	r2, r2, #16
 800250a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002530:	2b00      	cmp	r3, #0
 8002532:	d032      	beq.n	800259a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d022      	beq.n	8002586 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2205      	movs	r2, #5
 8002544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	3301      	adds	r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	429a      	cmp	r2, r3
 8002562:	d307      	bcc.n	8002574 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f2      	bne.n	8002558 <HAL_DMA_IRQHandler+0x2cc>
 8002572:	e000      	b.n	8002576 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002574:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	4798      	blx	r3
 8002596:	e000      	b.n	800259a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002598:	bf00      	nop
    }
  }
}
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ae:	b2db      	uxtb	r3, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d108      	bne.n	80025fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025fa:	e007      	b.n	800260c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	60da      	str	r2, [r3, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	3b10      	subs	r3, #16
 8002628:	4a14      	ldr	r2, [pc, #80]	; (800267c <DMA_CalcBaseAndBitshift+0x64>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002632:	4a13      	ldr	r2, [pc, #76]	; (8002680 <DMA_CalcBaseAndBitshift+0x68>)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d909      	bls.n	800265a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800264e:	f023 0303 	bic.w	r3, r3, #3
 8002652:	1d1a      	adds	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	659a      	str	r2, [r3, #88]	; 0x58
 8002658:	e007      	b.n	800266a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	aaaaaaab 	.word	0xaaaaaaab
 8002680:	08007db0 	.word	0x08007db0

08002684 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11f      	bne.n	80026de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d856      	bhi.n	8002752 <DMA_CheckFifoParam+0xce>
 80026a4:	a201      	add	r2, pc, #4	; (adr r2, 80026ac <DMA_CheckFifoParam+0x28>)
 80026a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026aa:	bf00      	nop
 80026ac:	080026bd 	.word	0x080026bd
 80026b0:	080026cf 	.word	0x080026cf
 80026b4:	080026bd 	.word	0x080026bd
 80026b8:	08002753 	.word	0x08002753
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d046      	beq.n	8002756 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026cc:	e043      	b.n	8002756 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026d6:	d140      	bne.n	800275a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026dc:	e03d      	b.n	800275a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e6:	d121      	bne.n	800272c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d837      	bhi.n	800275e <DMA_CheckFifoParam+0xda>
 80026ee:	a201      	add	r2, pc, #4	; (adr r2, 80026f4 <DMA_CheckFifoParam+0x70>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	08002705 	.word	0x08002705
 80026f8:	0800270b 	.word	0x0800270b
 80026fc:	08002705 	.word	0x08002705
 8002700:	0800271d 	.word	0x0800271d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      break;
 8002708:	e030      	b.n	800276c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d025      	beq.n	8002762 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271a:	e022      	b.n	8002762 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002724:	d11f      	bne.n	8002766 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800272a:	e01c      	b.n	8002766 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d903      	bls.n	800273a <DMA_CheckFifoParam+0xb6>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d003      	beq.n	8002740 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002738:	e018      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      break;
 800273e:	e015      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00e      	beq.n	800276a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      break;
 8002750:	e00b      	b.n	800276a <DMA_CheckFifoParam+0xe6>
      break;
 8002752:	bf00      	nop
 8002754:	e00a      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 8002756:	bf00      	nop
 8002758:	e008      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 800275a:	bf00      	nop
 800275c:	e006      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 800275e:	bf00      	nop
 8002760:	e004      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 8002762:	bf00      	nop
 8002764:	e002      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;   
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
    }
  } 
  
  return status; 
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	e16b      	b.n	8002a70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f040 815a 	bne.w	8002a6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d005      	beq.n	80027ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d130      	bne.n	8002830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002804:	2201      	movs	r2, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 0201 	and.w	r2, r3, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b03      	cmp	r3, #3
 800283a:	d017      	beq.n	800286c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d123      	bne.n	80028c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	08da      	lsrs	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3208      	adds	r2, #8
 8002880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	220f      	movs	r2, #15
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	08da      	lsrs	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3208      	adds	r2, #8
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0203 	and.w	r2, r3, #3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80b4 	beq.w	8002a6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b60      	ldr	r3, [pc, #384]	; (8002a88 <HAL_GPIO_Init+0x30c>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4a5f      	ldr	r2, [pc, #380]	; (8002a88 <HAL_GPIO_Init+0x30c>)
 800290c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002910:	6453      	str	r3, [r2, #68]	; 0x44
 8002912:	4b5d      	ldr	r3, [pc, #372]	; (8002a88 <HAL_GPIO_Init+0x30c>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291e:	4a5b      	ldr	r2, [pc, #364]	; (8002a8c <HAL_GPIO_Init+0x310>)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3302      	adds	r3, #2
 8002926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	220f      	movs	r2, #15
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a52      	ldr	r2, [pc, #328]	; (8002a90 <HAL_GPIO_Init+0x314>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d02b      	beq.n	80029a2 <HAL_GPIO_Init+0x226>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a51      	ldr	r2, [pc, #324]	; (8002a94 <HAL_GPIO_Init+0x318>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d025      	beq.n	800299e <HAL_GPIO_Init+0x222>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a50      	ldr	r2, [pc, #320]	; (8002a98 <HAL_GPIO_Init+0x31c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01f      	beq.n	800299a <HAL_GPIO_Init+0x21e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4f      	ldr	r2, [pc, #316]	; (8002a9c <HAL_GPIO_Init+0x320>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d019      	beq.n	8002996 <HAL_GPIO_Init+0x21a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4e      	ldr	r2, [pc, #312]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0x216>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4d      	ldr	r2, [pc, #308]	; (8002aa4 <HAL_GPIO_Init+0x328>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00d      	beq.n	800298e <HAL_GPIO_Init+0x212>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4c      	ldr	r2, [pc, #304]	; (8002aa8 <HAL_GPIO_Init+0x32c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <HAL_GPIO_Init+0x20e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4b      	ldr	r2, [pc, #300]	; (8002aac <HAL_GPIO_Init+0x330>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_GPIO_Init+0x20a>
 8002982:	2307      	movs	r3, #7
 8002984:	e00e      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 8002986:	2308      	movs	r3, #8
 8002988:	e00c      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 800298a:	2306      	movs	r3, #6
 800298c:	e00a      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 800298e:	2305      	movs	r3, #5
 8002990:	e008      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 8002992:	2304      	movs	r3, #4
 8002994:	e006      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 8002996:	2303      	movs	r3, #3
 8002998:	e004      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 800299a:	2302      	movs	r3, #2
 800299c:	e002      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 80029a2:	2300      	movs	r3, #0
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	f002 0203 	and.w	r2, r2, #3
 80029aa:	0092      	lsls	r2, r2, #2
 80029ac:	4093      	lsls	r3, r2
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b4:	4935      	ldr	r1, [pc, #212]	; (8002a8c <HAL_GPIO_Init+0x310>)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c2:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <HAL_GPIO_Init+0x334>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e6:	4a32      	ldr	r2, [pc, #200]	; (8002ab0 <HAL_GPIO_Init+0x334>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ec:	4b30      	ldr	r3, [pc, #192]	; (8002ab0 <HAL_GPIO_Init+0x334>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a10:	4a27      	ldr	r2, [pc, #156]	; (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a16:	4b26      	ldr	r3, [pc, #152]	; (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a3a:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a64:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b0f      	cmp	r3, #15
 8002a74:	f67f ae90 	bls.w	8002798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40020400 	.word	0x40020400
 8002a98:	40020800 	.word	0x40020800
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40021400 	.word	0x40021400
 8002aa8:	40021800 	.word	0x40021800
 8002aac:	40021c00 	.word	0x40021c00
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e12b      	b.n	8002d1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe fee8 	bl	80018b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	; 0x24
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b18:	f003 f838 	bl	8005b8c <HAL_RCC_GetPCLK1Freq>
 8002b1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a81      	ldr	r2, [pc, #516]	; (8002d28 <HAL_I2C_Init+0x274>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d807      	bhi.n	8002b38 <HAL_I2C_Init+0x84>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a80      	ldr	r2, [pc, #512]	; (8002d2c <HAL_I2C_Init+0x278>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	bf94      	ite	ls
 8002b30:	2301      	movls	r3, #1
 8002b32:	2300      	movhi	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e006      	b.n	8002b46 <HAL_I2C_Init+0x92>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a7d      	ldr	r2, [pc, #500]	; (8002d30 <HAL_I2C_Init+0x27c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	bf94      	ite	ls
 8002b40:	2301      	movls	r3, #1
 8002b42:	2300      	movhi	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0e7      	b.n	8002d1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a78      	ldr	r2, [pc, #480]	; (8002d34 <HAL_I2C_Init+0x280>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	0c9b      	lsrs	r3, r3, #18
 8002b58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a6a      	ldr	r2, [pc, #424]	; (8002d28 <HAL_I2C_Init+0x274>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d802      	bhi.n	8002b88 <HAL_I2C_Init+0xd4>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	3301      	adds	r3, #1
 8002b86:	e009      	b.n	8002b9c <HAL_I2C_Init+0xe8>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	4a69      	ldr	r2, [pc, #420]	; (8002d38 <HAL_I2C_Init+0x284>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	495c      	ldr	r1, [pc, #368]	; (8002d28 <HAL_I2C_Init+0x274>)
 8002bb8:	428b      	cmp	r3, r1
 8002bba:	d819      	bhi.n	8002bf0 <HAL_I2C_Init+0x13c>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1e59      	subs	r1, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bca:	1c59      	adds	r1, r3, #1
 8002bcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_I2C_Init+0x138>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e59      	subs	r1, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bea:	e051      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002bec:	2304      	movs	r3, #4
 8002bee:	e04f      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d111      	bne.n	8002c1c <HAL_I2C_Init+0x168>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e58      	subs	r0, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	440b      	add	r3, r1
 8002c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e012      	b.n	8002c42 <HAL_I2C_Init+0x18e>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e58      	subs	r0, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	0099      	lsls	r1, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Init+0x196>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e022      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10e      	bne.n	8002c70 <HAL_I2C_Init+0x1bc>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1e58      	subs	r0, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	440b      	add	r3, r1
 8002c60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c64:	3301      	adds	r3, #1
 8002c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c6e:	e00f      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1e58      	subs	r0, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	0099      	lsls	r1, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	6809      	ldr	r1, [r1, #0]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6911      	ldr	r1, [r2, #16]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68d2      	ldr	r2, [r2, #12]
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	000186a0 	.word	0x000186a0
 8002d2c:	001e847f 	.word	0x001e847f
 8002d30:	003d08ff 	.word	0x003d08ff
 8002d34:	431bde83 	.word	0x431bde83
 8002d38:	10624dd3 	.word	0x10624dd3

08002d3c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	2b80      	cmp	r3, #128	; 0x80
 8002d50:	d103      	bne.n	8002d5a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	4608      	mov	r0, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	461a      	mov	r2, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	817b      	strh	r3, [r7, #10]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	813b      	strh	r3, [r7, #8]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d82:	f7ff f819 	bl	8001db8 <HAL_GetTick>
 8002d86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	f040 80d9 	bne.w	8002f48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	2319      	movs	r3, #25
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	496d      	ldr	r1, [pc, #436]	; (8002f54 <HAL_I2C_Mem_Write+0x1ec>)
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f001 ffff 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
 8002dae:	e0cc      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_I2C_Mem_Write+0x56>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e0c5      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d007      	beq.n	8002de4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2221      	movs	r2, #33	; 0x21
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2240      	movs	r2, #64	; 0x40
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a3a      	ldr	r2, [r7, #32]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a4d      	ldr	r2, [pc, #308]	; (8002f58 <HAL_I2C_Mem_Write+0x1f0>)
 8002e24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e26:	88f8      	ldrh	r0, [r7, #6]
 8002e28:	893a      	ldrh	r2, [r7, #8]
 8002e2a:	8979      	ldrh	r1, [r7, #10]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	4603      	mov	r3, r0
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f001 fd8e 	bl	8004958 <I2C_RequestMemoryWrite>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d052      	beq.n	8002ee8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e081      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f002 f8c4 	bl	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d107      	bne.n	8002e6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e06b      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d11b      	bne.n	8002ee8 <HAL_I2C_Mem_Write+0x180>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d017      	beq.n	8002ee8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1aa      	bne.n	8002e46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f002 f8b7 	bl	8005068 <I2C_WaitOnBTFFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00d      	beq.n	8002f1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d107      	bne.n	8002f18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e016      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e000      	b.n	8002f4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	00100002 	.word	0x00100002
 8002f58:	ffff0000 	.word	0xffff0000

08002f5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08c      	sub	sp, #48	; 0x30
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	817b      	strh	r3, [r7, #10]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	813b      	strh	r3, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f76:	f7fe ff1f 	bl	8001db8 <HAL_GetTick>
 8002f7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	f040 8214 	bne.w	80033b2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2319      	movs	r3, #25
 8002f90:	2201      	movs	r2, #1
 8002f92:	497b      	ldr	r1, [pc, #492]	; (8003180 <HAL_I2C_Mem_Read+0x224>)
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f001 ff05 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e207      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_I2C_Mem_Read+0x56>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e200      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d007      	beq.n	8002fd8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2222      	movs	r2, #34	; 0x22
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2240      	movs	r2, #64	; 0x40
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003002:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003008:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a5b      	ldr	r2, [pc, #364]	; (8003184 <HAL_I2C_Mem_Read+0x228>)
 8003018:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800301a:	88f8      	ldrh	r0, [r7, #6]
 800301c:	893a      	ldrh	r2, [r7, #8]
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	4603      	mov	r3, r0
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f001 fd2a 	bl	8004a84 <I2C_RequestMemoryRead>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e1bc      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	2b00      	cmp	r3, #0
 8003040:	d113      	bne.n	800306a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003042:	2300      	movs	r3, #0
 8003044:	623b      	str	r3, [r7, #32]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	623b      	str	r3, [r7, #32]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	623b      	str	r3, [r7, #32]
 8003056:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e190      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306e:	2b01      	cmp	r3, #1
 8003070:	d11b      	bne.n	80030aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e170      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d11b      	bne.n	80030ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	e150      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003100:	e144      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	2b03      	cmp	r3, #3
 8003108:	f200 80f1 	bhi.w	80032ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	2b01      	cmp	r3, #1
 8003112:	d123      	bne.n	800315c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003116:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f002 f81f 	bl	800515c <I2C_WaitOnRXNEFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e145      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	855a      	strh	r2, [r3, #42]	; 0x2a
 800315a:	e117      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	2b02      	cmp	r3, #2
 8003162:	d14e      	bne.n	8003202 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	2200      	movs	r2, #0
 800316c:	4906      	ldr	r1, [pc, #24]	; (8003188 <HAL_I2C_Mem_Read+0x22c>)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f001 fe18 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e11a      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
 800317e:	bf00      	nop
 8003180:	00100002 	.word	0x00100002
 8003184:	ffff0000 	.word	0xffff0000
 8003188:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003200:	e0c4      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	2200      	movs	r2, #0
 800320a:	496c      	ldr	r1, [pc, #432]	; (80033bc <HAL_I2C_Mem_Read+0x460>)
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f001 fdc9 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0cb      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800322a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003264:	2200      	movs	r2, #0
 8003266:	4955      	ldr	r1, [pc, #340]	; (80033bc <HAL_I2C_Mem_Read+0x460>)
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f001 fd9b 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e09d      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ec:	e04e      	b.n	800338c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f001 ff32 	bl	800515c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e058      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b04      	cmp	r3, #4
 8003340:	d124      	bne.n	800338c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003346:	2b03      	cmp	r3, #3
 8003348:	d107      	bne.n	800335a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003358:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	f47f aeb6 	bne.w	8003102 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
  }
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3728      	adds	r7, #40	; 0x28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	00010004 	.word	0x00010004

080033c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d003      	beq.n	80033f8 <HAL_I2C_EV_IRQHandler+0x38>
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b40      	cmp	r3, #64	; 0x40
 80033f4:	f040 80b1 	bne.w	800355a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10d      	bne.n	800342e <HAL_I2C_EV_IRQHandler+0x6e>
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003418:	d003      	beq.n	8003422 <HAL_I2C_EV_IRQHandler+0x62>
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003420:	d101      	bne.n	8003426 <HAL_I2C_EV_IRQHandler+0x66>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_I2C_EV_IRQHandler+0x68>
 8003426:	2300      	movs	r3, #0
 8003428:	2b01      	cmp	r3, #1
 800342a:	f000 8114 	beq.w	8003656 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <HAL_I2C_EV_IRQHandler+0x90>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343e:	2b00      	cmp	r3, #0
 8003440:	d006      	beq.n	8003450 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f001 ff16 	bl	8005274 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fcdb 	bl	8003e04 <I2C_Master_SB>
 800344e:	e083      	b.n	8003558 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_I2C_EV_IRQHandler+0xac>
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fd53 	bl	8003f10 <I2C_Master_ADD10>
 800346a:	e075      	b.n	8003558 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_I2C_EV_IRQHandler+0xc8>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fd6f 	bl	8003f64 <I2C_Master_ADDR>
 8003486:	e067      	b.n	8003558 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d036      	beq.n	8003500 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a0:	f000 80db 	beq.w	800365a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0x10a>
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0x10a>
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f937 	bl	8003736 <I2C_MasterTransmit_TXE>
 80034c8:	e046      	b.n	8003558 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80c2 	beq.w	800365a <HAL_I2C_EV_IRQHandler+0x29a>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80bc 	beq.w	800365a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034e2:	7bbb      	ldrb	r3, [r7, #14]
 80034e4:	2b21      	cmp	r3, #33	; 0x21
 80034e6:	d103      	bne.n	80034f0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f9c0 	bl	800386e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ee:	e0b4      	b.n	800365a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	f040 80b1 	bne.w	800365a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fa2e 	bl	800395a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034fe:	e0ac      	b.n	800365a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800350e:	f000 80a4 	beq.w	800365a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <HAL_I2C_EV_IRQHandler+0x178>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_I2C_EV_IRQHandler+0x178>
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d103      	bne.n	8003538 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 faaa 	bl	8003a8a <I2C_MasterReceive_RXNE>
 8003536:	e00f      	b.n	8003558 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 808b 	beq.w	800365a <HAL_I2C_EV_IRQHandler+0x29a>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8085 	beq.w	800365a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fb62 	bl	8003c1a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003556:	e080      	b.n	800365a <HAL_I2C_EV_IRQHandler+0x29a>
 8003558:	e07f      	b.n	800365a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	e007      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d011      	beq.n	80035aa <HAL_I2C_EV_IRQHandler+0x1ea>
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00c      	beq.n	80035aa <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80035a0:	69b9      	ldr	r1, [r7, #24]
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 ff2d 	bl	8004402 <I2C_Slave_ADDR>
 80035a8:	e05a      	b.n	8003660 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_I2C_EV_IRQHandler+0x206>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 ff68 	bl	8004494 <I2C_Slave_STOPF>
 80035c4:	e04c      	b.n	8003660 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035c6:	7bbb      	ldrb	r3, [r7, #14]
 80035c8:	2b21      	cmp	r3, #33	; 0x21
 80035ca:	d002      	beq.n	80035d2 <HAL_I2C_EV_IRQHandler+0x212>
 80035cc:	7bbb      	ldrb	r3, [r7, #14]
 80035ce:	2b29      	cmp	r3, #41	; 0x29
 80035d0:	d120      	bne.n	8003614 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00d      	beq.n	80035f8 <HAL_I2C_EV_IRQHandler+0x238>
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_I2C_EV_IRQHandler+0x238>
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d103      	bne.n	80035f8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fe48 	bl	8004286 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035f6:	e032      	b.n	800365e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d02d      	beq.n	800365e <HAL_I2C_EV_IRQHandler+0x29e>
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003608:	2b00      	cmp	r3, #0
 800360a:	d028      	beq.n	800365e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fe77 	bl	8004300 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003612:	e024      	b.n	800365e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <HAL_I2C_EV_IRQHandler+0x27a>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_I2C_EV_IRQHandler+0x27a>
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d103      	bne.n	800363a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fe85 	bl	8004342 <I2C_SlaveReceive_RXNE>
 8003638:	e012      	b.n	8003660 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00d      	beq.n	8003660 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 feb5 	bl	80043be <I2C_SlaveReceive_BTF>
 8003654:	e004      	b.n	8003660 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003656:	bf00      	nop
 8003658:	e002      	b.n	8003660 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800365a:	bf00      	nop
 800365c:	e000      	b.n	8003660 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800365e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	70fb      	strb	r3, [r7, #3]
 80036c2:	4613      	mov	r3, r2
 80036c4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800374c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003758:	2b00      	cmp	r3, #0
 800375a:	d150      	bne.n	80037fe <I2C_MasterTransmit_TXE+0xc8>
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b21      	cmp	r3, #33	; 0x21
 8003760:	d14d      	bne.n	80037fe <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d01d      	beq.n	80037a4 <I2C_MasterTransmit_TXE+0x6e>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b20      	cmp	r3, #32
 800376c:	d01a      	beq.n	80037a4 <I2C_MasterTransmit_TXE+0x6e>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003774:	d016      	beq.n	80037a4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003784:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2211      	movs	r2, #17
 800378a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ff62 	bl	8003666 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037a2:	e060      	b.n	8003866 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037b2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d107      	bne.n	80037ee <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ff7d 	bl	80036e6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037ec:	e03b      	b.n	8003866 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff ff35 	bl	8003666 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037fc:	e033      	b.n	8003866 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b21      	cmp	r3, #33	; 0x21
 8003802:	d005      	beq.n	8003810 <I2C_MasterTransmit_TXE+0xda>
 8003804:	7bbb      	ldrb	r3, [r7, #14]
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d12d      	bne.n	8003866 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	2b22      	cmp	r3, #34	; 0x22
 800380e:	d12a      	bne.n	8003866 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003828:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800382a:	e01c      	b.n	8003866 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b40      	cmp	r3, #64	; 0x40
 8003836:	d103      	bne.n	8003840 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f88e 	bl	800395a <I2C_MemoryTransmit_TXE_BTF>
}
 800383e:	e012      	b.n	8003866 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003864:	e7ff      	b.n	8003866 <I2C_MasterTransmit_TXE+0x130>
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b21      	cmp	r3, #33	; 0x21
 8003886:	d164      	bne.n	8003952 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d012      	beq.n	80038b8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	781a      	ldrb	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038b6:	e04c      	b.n	8003952 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d01d      	beq.n	80038fa <I2C_MasterTransmit_BTF+0x8c>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d01a      	beq.n	80038fa <I2C_MasterTransmit_BTF+0x8c>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038ca:	d016      	beq.n	80038fa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038da:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2211      	movs	r2, #17
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff feb7 	bl	8003666 <HAL_I2C_MasterTxCpltCallback>
}
 80038f8:	e02b      	b.n	8003952 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003908:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003918:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d107      	bne.n	8003944 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff fed2 	bl	80036e6 <HAL_I2C_MemTxCpltCallback>
}
 8003942:	e006      	b.n	8003952 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff fe8a 	bl	8003666 <HAL_I2C_MasterTxCpltCallback>
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003968:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396e:	2b00      	cmp	r3, #0
 8003970:	d11d      	bne.n	80039ae <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10b      	bne.n	8003992 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397e:	b2da      	uxtb	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398a:	1c9a      	adds	r2, r3, #2
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003990:	e077      	b.n	8003a82 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003996:	b29b      	uxth	r3, r3
 8003998:	121b      	asrs	r3, r3, #8
 800399a:	b2da      	uxtb	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039ac:	e069      	b.n	8003a82 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d10b      	bne.n	80039ce <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039cc:	e059      	b.n	8003a82 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d152      	bne.n	8003a7c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b22      	cmp	r3, #34	; 0x22
 80039da:	d10d      	bne.n	80039f8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ea:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039f6:	e044      	b.n	8003a82 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d015      	beq.n	8003a2e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b21      	cmp	r3, #33	; 0x21
 8003a06:	d112      	bne.n	8003a2e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a2c:	e029      	b.n	8003a82 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d124      	bne.n	8003a82 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	2b21      	cmp	r3, #33	; 0x21
 8003a3c:	d121      	bne.n	8003a82 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a4c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fe36 	bl	80036e6 <HAL_I2C_MemTxCpltCallback>
}
 8003a7a:	e002      	b.n	8003a82 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff f95d 	bl	8002d3c <I2C_Flush_DR>
}
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b22      	cmp	r3, #34	; 0x22
 8003a9c:	f040 80b9 	bne.w	8003c12 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d921      	bls.n	8003af8 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	f040 8096 	bne.w	8003c12 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003af6:	e08c      	b.n	8003c12 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d07f      	beq.n	8003c00 <I2C_MasterReceive_RXNE+0x176>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d002      	beq.n	8003b0c <I2C_MasterReceive_RXNE+0x82>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d179      	bne.n	8003c00 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f001 faf3 	bl	80050f8 <I2C_WaitOnSTOPRequestThroughIT>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d14c      	bne.n	8003bb2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b26:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b36:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d10a      	bne.n	8003b88 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff fdba 	bl	80036fa <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b86:	e044      	b.n	8003c12 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d002      	beq.n	8003b9c <I2C_MasterReceive_RXNE+0x112>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d103      	bne.n	8003ba4 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ba2:	e002      	b.n	8003baa <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2212      	movs	r2, #18
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff fd65 	bl	800367a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bb0:	e02f      	b.n	8003c12 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bc0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff fd88 	bl	800370e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bfe:	e008      	b.n	8003c12 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c0e:	605a      	str	r2, [r3, #4]
}
 8003c10:	e7ff      	b.n	8003c12 <I2C_MasterReceive_RXNE+0x188>
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d11b      	bne.n	8003c6a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c40:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c68:	e0c8      	b.n	8003dfc <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d129      	bne.n	8003cc8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c82:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d00a      	beq.n	8003ca0 <I2C_MasterReceive_BTF+0x86>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d007      	beq.n	8003ca0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cc6:	e099      	b.n	8003dfc <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	f040 8081 	bne.w	8003dd6 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d002      	beq.n	8003ce0 <I2C_MasterReceive_BTF+0xc6>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d108      	bne.n	8003cf2 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e019      	b.n	8003d26 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d002      	beq.n	8003cfe <I2C_MasterReceive_BTF+0xe4>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d108      	bne.n	8003d10 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	e00a      	b.n	8003d26 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	d007      	beq.n	8003d26 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d24:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d80:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d10a      	bne.n	8003dac <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff fca8 	bl	80036fa <HAL_I2C_MemRxCpltCallback>
}
 8003daa:	e027      	b.n	8003dfc <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d002      	beq.n	8003dc0 <I2C_MasterReceive_BTF+0x1a6>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d103      	bne.n	8003dc8 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
 8003dc6:	e002      	b.n	8003dce <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2212      	movs	r2, #18
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff fc53 	bl	800367a <HAL_I2C_MasterRxCpltCallback>
}
 8003dd4:	e012      	b.n	8003dfc <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d117      	bne.n	8003e48 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e30:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e32:	e067      	b.n	8003f04 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	611a      	str	r2, [r3, #16]
}
 8003e46:	e05d      	b.n	8003f04 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e50:	d133      	bne.n	8003eba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b21      	cmp	r3, #33	; 0x21
 8003e5c:	d109      	bne.n	8003e72 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e6e:	611a      	str	r2, [r3, #16]
 8003e70:	e008      	b.n	8003e84 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d004      	beq.n	8003e96 <I2C_Master_SB+0x92>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d108      	bne.n	8003ea8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d032      	beq.n	8003f04 <I2C_Master_SB+0x100>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d02d      	beq.n	8003f04 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb6:	605a      	str	r2, [r3, #4]
}
 8003eb8:	e024      	b.n	8003f04 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10e      	bne.n	8003ee0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	11db      	asrs	r3, r3, #7
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f003 0306 	and.w	r3, r3, #6
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f063 030f 	orn	r3, r3, #15
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	611a      	str	r2, [r3, #16]
}
 8003ede:	e011      	b.n	8003f04 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d10d      	bne.n	8003f04 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	11db      	asrs	r3, r3, #7
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f003 0306 	and.w	r3, r3, #6
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f063 030e 	orn	r3, r3, #14
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	611a      	str	r2, [r3, #16]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d004      	beq.n	8003f36 <I2C_Master_ADD10+0x26>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d108      	bne.n	8003f48 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <I2C_Master_ADD10+0x48>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f56:	605a      	str	r2, [r3, #4]
  }
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b091      	sub	sp, #68	; 0x44
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b22      	cmp	r3, #34	; 0x22
 8003f8c:	f040 8169 	bne.w	8004262 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10f      	bne.n	8003fb8 <I2C_Master_ADDR+0x54>
 8003f98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d10b      	bne.n	8003fb8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	633b      	str	r3, [r7, #48]	; 0x30
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	e160      	b.n	800427a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d11d      	bne.n	8003ffc <I2C_Master_ADDR+0x98>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fc8:	d118      	bne.n	8003ffc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fee:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	651a      	str	r2, [r3, #80]	; 0x50
 8003ffa:	e13e      	b.n	800427a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d113      	bne.n	800402e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004006:	2300      	movs	r3, #0
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	e115      	b.n	800425a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	f040 808a 	bne.w	800414e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004040:	d137      	bne.n	80040b2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004050:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004060:	d113      	bne.n	800408a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004070:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004072:	2300      	movs	r3, #0
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	e0e7      	b.n	800425a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408a:	2300      	movs	r3, #0
 800408c:	623b      	str	r3, [r7, #32]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	623b      	str	r3, [r7, #32]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	623b      	str	r3, [r7, #32]
 800409e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	e0d3      	b.n	800425a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80040b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d02e      	beq.n	8004116 <I2C_Master_ADDR+0x1b2>
 80040b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d02b      	beq.n	8004116 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c0:	2b12      	cmp	r3, #18
 80040c2:	d102      	bne.n	80040ca <I2C_Master_ADDR+0x166>
 80040c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d125      	bne.n	8004116 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d00e      	beq.n	80040ee <I2C_Master_ADDR+0x18a>
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d00b      	beq.n	80040ee <I2C_Master_ADDR+0x18a>
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d008      	beq.n	80040ee <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e007      	b.n	80040fe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	e0a1      	b.n	800425a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004124:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004126:	2300      	movs	r3, #0
 8004128:	61bb      	str	r3, [r7, #24]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e085      	b.n	800425a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d14d      	bne.n	80041f4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	2b04      	cmp	r3, #4
 800415c:	d016      	beq.n	800418c <I2C_Master_ADDR+0x228>
 800415e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004160:	2b02      	cmp	r3, #2
 8004162:	d013      	beq.n	800418c <I2C_Master_ADDR+0x228>
 8004164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004166:	2b10      	cmp	r3, #16
 8004168:	d010      	beq.n	800418c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004178:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e007      	b.n	800419c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800419a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041aa:	d117      	bne.n	80041dc <I2C_Master_ADDR+0x278>
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041b2:	d00b      	beq.n	80041cc <I2C_Master_ADDR+0x268>
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d008      	beq.n	80041cc <I2C_Master_ADDR+0x268>
 80041ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d005      	beq.n	80041cc <I2C_Master_ADDR+0x268>
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	2b10      	cmp	r3, #16
 80041c4:	d002      	beq.n	80041cc <I2C_Master_ADDR+0x268>
 80041c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d107      	bne.n	80041dc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	e032      	b.n	800425a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004202:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004212:	d117      	bne.n	8004244 <I2C_Master_ADDR+0x2e0>
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800421a:	d00b      	beq.n	8004234 <I2C_Master_ADDR+0x2d0>
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	2b01      	cmp	r3, #1
 8004220:	d008      	beq.n	8004234 <I2C_Master_ADDR+0x2d0>
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	2b08      	cmp	r3, #8
 8004226:	d005      	beq.n	8004234 <I2C_Master_ADDR+0x2d0>
 8004228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422a:	2b10      	cmp	r3, #16
 800422c:	d002      	beq.n	8004234 <I2C_Master_ADDR+0x2d0>
 800422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004230:	2b20      	cmp	r3, #32
 8004232:	d107      	bne.n	8004244 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004242:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004244:	2300      	movs	r3, #0
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004260:	e00b      	b.n	800427a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]
}
 8004278:	e7ff      	b.n	800427a <I2C_Master_ADDR+0x316>
 800427a:	bf00      	nop
 800427c:	3744      	adds	r7, #68	; 0x44
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004294:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d02b      	beq.n	80042f8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	781a      	ldrb	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d114      	bne.n	80042f8 <I2C_SlaveTransmit_TXE+0x72>
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	2b29      	cmp	r3, #41	; 0x29
 80042d2:	d111      	bne.n	80042f8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2221      	movs	r2, #33	; 0x21
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2228      	movs	r2, #40	; 0x28
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff f9cb 	bl	800368e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d011      	beq.n	8004336 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	781a      	ldrb	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004350:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d02c      	beq.n	80043b6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d114      	bne.n	80043b6 <I2C_SlaveReceive_RXNE+0x74>
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b2a      	cmp	r3, #42	; 0x2a
 8004390:	d111      	bne.n	80043b6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2222      	movs	r2, #34	; 0x22
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2228      	movs	r2, #40	; 0x28
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff f976 	bl	80036a2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d012      	beq.n	80043f6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800440c:	2300      	movs	r3, #0
 800440e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004416:	b2db      	uxtb	r3, r3
 8004418:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800441c:	2b28      	cmp	r3, #40	; 0x28
 800441e:	d125      	bne.n	800446c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800443a:	2301      	movs	r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004444:	2b00      	cmp	r3, #0
 8004446:	d103      	bne.n	8004450 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	81bb      	strh	r3, [r7, #12]
 800444e:	e002      	b.n	8004456 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800445e:	89ba      	ldrh	r2, [r7, #12]
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff f926 	bl	80036b6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800446a:	e00e      	b.n	800448a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446c:	2300      	movs	r3, #0
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	60bb      	str	r3, [r7, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044b4:	2300      	movs	r3, #0
 80044b6:	60bb      	str	r3, [r7, #8]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f0:	d172      	bne.n	80045d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	2b22      	cmp	r3, #34	; 0x22
 80044f6:	d002      	beq.n	80044fe <I2C_Slave_STOPF+0x6a>
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b2a      	cmp	r3, #42	; 0x2a
 80044fc:	d135      	bne.n	800456a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	b29a      	uxth	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f043 0204 	orr.w	r2, r3, #4
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004530:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe f832 	bl	80025a0 <HAL_DMA_GetState>
 800453c:	4603      	mov	r3, r0
 800453e:	2b01      	cmp	r3, #1
 8004540:	d049      	beq.n	80045d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	4a69      	ldr	r2, [pc, #420]	; (80046ec <I2C_Slave_STOPF+0x258>)
 8004548:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	4618      	mov	r0, r3
 8004550:	f7fd fe7a 	bl	8002248 <HAL_DMA_Abort_IT>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d03d      	beq.n	80045d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004564:	4610      	mov	r0, r2
 8004566:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004568:	e035      	b.n	80045d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	b29a      	uxth	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	f043 0204 	orr.w	r2, r3, #4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fd fffc 	bl	80025a0 <HAL_DMA_GetState>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d014      	beq.n	80045d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	4a4e      	ldr	r2, [pc, #312]	; (80046ec <I2C_Slave_STOPF+0x258>)
 80045b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fe44 	bl	8002248 <HAL_DMA_Abort_IT>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045d0:	4610      	mov	r0, r2
 80045d2:	4798      	blx	r3
 80045d4:	e000      	b.n	80045d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d03e      	beq.n	8004660 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d112      	bne.n	8004616 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b40      	cmp	r3, #64	; 0x40
 8004622:	d112      	bne.n	800464a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	f043 0204 	orr.w	r2, r3, #4
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f843 	bl	80046f4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800466e:	e039      	b.n	80046e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	2b2a      	cmp	r3, #42	; 0x2a
 8004674:	d109      	bne.n	800468a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2228      	movs	r2, #40	; 0x28
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff f80c 	bl	80036a2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b28      	cmp	r3, #40	; 0x28
 8004694:	d111      	bne.n	80046ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a15      	ldr	r2, [pc, #84]	; (80046f0 <I2C_Slave_STOPF+0x25c>)
 800469a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff f80d 	bl	80036d2 <HAL_I2C_ListenCpltCallback>
}
 80046b8:	e014      	b.n	80046e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	2b22      	cmp	r3, #34	; 0x22
 80046c0:	d002      	beq.n	80046c8 <I2C_Slave_STOPF+0x234>
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	2b22      	cmp	r3, #34	; 0x22
 80046c6:	d10d      	bne.n	80046e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fe ffdf 	bl	80036a2 <HAL_I2C_SlaveRxCpltCallback>
}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	08004c55 	.word	0x08004c55
 80046f0:	ffff0000 	.word	0xffff0000

080046f4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004702:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800470a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800470c:	7bbb      	ldrb	r3, [r7, #14]
 800470e:	2b10      	cmp	r3, #16
 8004710:	d002      	beq.n	8004718 <I2C_ITError+0x24>
 8004712:	7bbb      	ldrb	r3, [r7, #14]
 8004714:	2b40      	cmp	r3, #64	; 0x40
 8004716:	d10a      	bne.n	800472e <I2C_ITError+0x3a>
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b22      	cmp	r3, #34	; 0x22
 800471c:	d107      	bne.n	800472e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800472c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004734:	2b28      	cmp	r3, #40	; 0x28
 8004736:	d107      	bne.n	8004748 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2228      	movs	r2, #40	; 0x28
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004746:	e015      	b.n	8004774 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004756:	d00a      	beq.n	800476e <I2C_ITError+0x7a>
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	2b60      	cmp	r3, #96	; 0x60
 800475c:	d007      	beq.n	800476e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004782:	d162      	bne.n	800484a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004792:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d020      	beq.n	80047e4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	4a6a      	ldr	r2, [pc, #424]	; (8004950 <I2C_ITError+0x25c>)
 80047a8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fd fd4a 	bl	8002248 <HAL_DMA_Abort_IT>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8089 	beq.w	80048ce <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047de:	4610      	mov	r0, r2
 80047e0:	4798      	blx	r3
 80047e2:	e074      	b.n	80048ce <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	4a59      	ldr	r2, [pc, #356]	; (8004950 <I2C_ITError+0x25c>)
 80047ea:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fd fd29 	bl	8002248 <HAL_DMA_Abort_IT>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d068      	beq.n	80048ce <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004806:	2b40      	cmp	r3, #64	; 0x40
 8004808:	d10b      	bne.n	8004822 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004844:	4610      	mov	r0, r2
 8004846:	4798      	blx	r3
 8004848:	e041      	b.n	80048ce <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b60      	cmp	r3, #96	; 0x60
 8004854:	d125      	bne.n	80048a2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486e:	2b40      	cmp	r3, #64	; 0x40
 8004870:	d10b      	bne.n	800488a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fe ff41 	bl	8003722 <HAL_I2C_AbortCpltCallback>
 80048a0:	e015      	b.n	80048ce <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d10b      	bne.n	80048c8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7fe ff20 	bl	800370e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10e      	bne.n	80048fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d109      	bne.n	80048fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d104      	bne.n	80048fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800490a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004912:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b04      	cmp	r3, #4
 800491e:	d113      	bne.n	8004948 <I2C_ITError+0x254>
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b28      	cmp	r3, #40	; 0x28
 8004924:	d110      	bne.n	8004948 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <I2C_ITError+0x260>)
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fe fec5 	bl	80036d2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	08004c55 	.word	0x08004c55
 8004954:	ffff0000 	.word	0xffff0000

08004958 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	4608      	mov	r0, r1
 8004962:	4611      	mov	r1, r2
 8004964:	461a      	mov	r2, r3
 8004966:	4603      	mov	r3, r0
 8004968:	817b      	strh	r3, [r7, #10]
 800496a:	460b      	mov	r3, r1
 800496c:	813b      	strh	r3, [r7, #8]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004980:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	2200      	movs	r2, #0
 800498a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fa08 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a8:	d103      	bne.n	80049b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e05f      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049b6:	897b      	ldrh	r3, [r7, #10]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	6a3a      	ldr	r2, [r7, #32]
 80049ca:	492d      	ldr	r1, [pc, #180]	; (8004a80 <I2C_RequestMemoryWrite+0x128>)
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 fa63 	bl	8004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e04c      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f4:	6a39      	ldr	r1, [r7, #32]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 faee 	bl	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00d      	beq.n	8004a1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d107      	bne.n	8004a1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e02b      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d105      	bne.n	8004a30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a24:	893b      	ldrh	r3, [r7, #8]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	611a      	str	r2, [r3, #16]
 8004a2e:	e021      	b.n	8004a74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a30:	893b      	ldrh	r3, [r7, #8]
 8004a32:	0a1b      	lsrs	r3, r3, #8
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	6a39      	ldr	r1, [r7, #32]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fac8 	bl	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00d      	beq.n	8004a6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d107      	bne.n	8004a66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e005      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a6a:	893b      	ldrh	r3, [r7, #8]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	00010002 	.word	0x00010002

08004a84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	461a      	mov	r2, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	817b      	strh	r3, [r7, #10]
 8004a96:	460b      	mov	r3, r1
 8004a98:	813b      	strh	r3, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004abc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f96a 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae4:	d103      	bne.n	8004aee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0aa      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004af2:	897b      	ldrh	r3, [r7, #10]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	4952      	ldr	r1, [pc, #328]	; (8004c50 <I2C_RequestMemoryRead+0x1cc>)
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f9c5 	bl	8004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e097      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b30:	6a39      	ldr	r1, [r7, #32]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fa50 	bl	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00d      	beq.n	8004b5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d107      	bne.n	8004b56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e076      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d105      	bne.n	8004b6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b60:	893b      	ldrh	r3, [r7, #8]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	611a      	str	r2, [r3, #16]
 8004b6a:	e021      	b.n	8004bb0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b6c:	893b      	ldrh	r3, [r7, #8]
 8004b6e:	0a1b      	lsrs	r3, r3, #8
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7c:	6a39      	ldr	r1, [r7, #32]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 fa2a 	bl	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00d      	beq.n	8004ba6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d107      	bne.n	8004ba2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e050      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba6:	893b      	ldrh	r3, [r7, #8]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	6a39      	ldr	r1, [r7, #32]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fa0f 	bl	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00d      	beq.n	8004bdc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d107      	bne.n	8004bd8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e035      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f8d3 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00d      	beq.n	8004c20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c12:	d103      	bne.n	8004c1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e013      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c20:	897b      	ldrh	r3, [r7, #10]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	6a3a      	ldr	r2, [r7, #32]
 8004c34:	4906      	ldr	r1, [pc, #24]	; (8004c50 <I2C_RequestMemoryRead+0x1cc>)
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f92e 	bl	8004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	00010002 	.word	0x00010002

08004c54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c6e:	4b4b      	ldr	r3, [pc, #300]	; (8004d9c <I2C_DMAAbort+0x148>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	08db      	lsrs	r3, r3, #3
 8004c74:	4a4a      	ldr	r2, [pc, #296]	; (8004da0 <I2C_DMAAbort+0x14c>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	0a1a      	lsrs	r2, r3, #8
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	00da      	lsls	r2, r3, #3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f043 0220 	orr.w	r2, r3, #32
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004c9a:	e00a      	b.n	8004cb2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb0:	d0ea      	beq.n	8004c88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	2200      	movs	r2, #0
 8004cd0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	2200      	movs	r2, #0
 8004d06:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0201 	bic.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b60      	cmp	r3, #96	; 0x60
 8004d22:	d10e      	bne.n	8004d42 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2200      	movs	r2, #0
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d3a:	6978      	ldr	r0, [r7, #20]
 8004d3c:	f7fe fcf1 	bl	8003722 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d40:	e027      	b.n	8004d92 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d42:	7cfb      	ldrb	r3, [r7, #19]
 8004d44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d48:	2b28      	cmp	r3, #40	; 0x28
 8004d4a:	d117      	bne.n	8004d7c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2228      	movs	r2, #40	; 0x28
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d7a:	e007      	b.n	8004d8c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d8c:	6978      	ldr	r0, [r7, #20]
 8004d8e:	f7fe fcbe 	bl	800370e <HAL_I2C_ErrorCallback>
}
 8004d92:	bf00      	nop
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000000 	.word	0x20000000
 8004da0:	14f8b589 	.word	0x14f8b589

08004da4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004db4:	e048      	b.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d044      	beq.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbe:	f7fc fffb 	bl	8001db8 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d302      	bcc.n	8004dd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d139      	bne.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	0c1b      	lsrs	r3, r3, #16
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d10d      	bne.n	8004dfa <I2C_WaitOnFlagUntilTimeout+0x56>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	43da      	mvns	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4013      	ands	r3, r2
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	e00c      	b.n	8004e14 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	43da      	mvns	r2, r3
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4013      	ands	r3, r2
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2301      	moveq	r3, #1
 8004e0e:	2300      	movne	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	79fb      	ldrb	r3, [r7, #7]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d116      	bne.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e023      	b.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	0c1b      	lsrs	r3, r3, #16
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d10d      	bne.n	8004e6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	43da      	mvns	r2, r3
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	e00c      	b.n	8004e88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	43da      	mvns	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bf0c      	ite	eq
 8004e80:	2301      	moveq	r3, #1
 8004e82:	2300      	movne	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d093      	beq.n	8004db6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ea6:	e071      	b.n	8004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb6:	d123      	bne.n	8004f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f043 0204 	orr.w	r2, r3, #4
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e067      	b.n	8004fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d041      	beq.n	8004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f08:	f7fc ff56 	bl	8001db8 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d136      	bne.n	8004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d10c      	bne.n	8004f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	43da      	mvns	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4013      	ands	r3, r2
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	bf14      	ite	ne
 8004f3a:	2301      	movne	r3, #1
 8004f3c:	2300      	moveq	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	e00b      	b.n	8004f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	43da      	mvns	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bf14      	ite	ne
 8004f54:	2301      	movne	r3, #1
 8004f56:	2300      	moveq	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d016      	beq.n	8004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	f043 0220 	orr.w	r2, r3, #32
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e021      	b.n	8004fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d10c      	bne.n	8004fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	43da      	mvns	r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e00b      	b.n	8004fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	43da      	mvns	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	bf14      	ite	ne
 8004fc2:	2301      	movne	r3, #1
 8004fc4:	2300      	moveq	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f47f af6d 	bne.w	8004ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fe4:	e034      	b.n	8005050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f915 	bl	8005216 <I2C_IsAcknowledgeFailed>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e034      	b.n	8005060 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d028      	beq.n	8005050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7fc fedb 	bl	8001db8 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d11d      	bne.n	8005050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501e:	2b80      	cmp	r3, #128	; 0x80
 8005020:	d016      	beq.n	8005050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e007      	b.n	8005060 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	d1c3      	bne.n	8004fe6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005074:	e034      	b.n	80050e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f8cd 	bl	8005216 <I2C_IsAcknowledgeFailed>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e034      	b.n	80050f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d028      	beq.n	80050e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508e:	f7fc fe93 	bl	8001db8 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11d      	bne.n	80050e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d016      	beq.n	80050e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	f043 0220 	orr.w	r2, r3, #32
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e007      	b.n	80050f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d1c3      	bne.n	8005076 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005104:	4b13      	ldr	r3, [pc, #76]	; (8005154 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	08db      	lsrs	r3, r3, #3
 800510a:	4a13      	ldr	r2, [pc, #76]	; (8005158 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800510c:	fba2 2303 	umull	r2, r3, r2, r3
 8005110:	0a1a      	lsrs	r2, r3, #8
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3b01      	subs	r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d107      	bne.n	8005136 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f043 0220 	orr.w	r2, r3, #32
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e008      	b.n	8005148 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005144:	d0e9      	beq.n	800511a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	20000000 	.word	0x20000000
 8005158:	14f8b589 	.word	0x14f8b589

0800515c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005168:	e049      	b.n	80051fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b10      	cmp	r3, #16
 8005176:	d119      	bne.n	80051ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0210 	mvn.w	r2, #16
 8005180:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e030      	b.n	800520e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ac:	f7fc fe04 	bl	8001db8 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d302      	bcc.n	80051c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d11d      	bne.n	80051fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051cc:	2b40      	cmp	r3, #64	; 0x40
 80051ce:	d016      	beq.n	80051fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e007      	b.n	800520e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005208:	2b40      	cmp	r3, #64	; 0x40
 800520a:	d1ae      	bne.n	800516a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800522c:	d11b      	bne.n	8005266 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005236:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2220      	movs	r2, #32
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f043 0204 	orr.w	r2, r3, #4
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005284:	d103      	bne.n	800528e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800528c:	e007      	b.n	800529e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005296:	d102      	bne.n	800529e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2208      	movs	r2, #8
 800529c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e267      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d075      	beq.n	80053b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ca:	4b88      	ldr	r3, [pc, #544]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d00c      	beq.n	80052f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052d6:	4b85      	ldr	r3, [pc, #532]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d112      	bne.n	8005308 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052e2:	4b82      	ldr	r3, [pc, #520]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ee:	d10b      	bne.n	8005308 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f0:	4b7e      	ldr	r3, [pc, #504]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d05b      	beq.n	80053b4 <HAL_RCC_OscConfig+0x108>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d157      	bne.n	80053b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e242      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005310:	d106      	bne.n	8005320 <HAL_RCC_OscConfig+0x74>
 8005312:	4b76      	ldr	r3, [pc, #472]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a75      	ldr	r2, [pc, #468]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 8005318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	e01d      	b.n	800535c <HAL_RCC_OscConfig+0xb0>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005328:	d10c      	bne.n	8005344 <HAL_RCC_OscConfig+0x98>
 800532a:	4b70      	ldr	r3, [pc, #448]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a6f      	ldr	r2, [pc, #444]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 8005330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	4b6d      	ldr	r3, [pc, #436]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a6c      	ldr	r2, [pc, #432]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 800533c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	e00b      	b.n	800535c <HAL_RCC_OscConfig+0xb0>
 8005344:	4b69      	ldr	r3, [pc, #420]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a68      	ldr	r2, [pc, #416]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 800534a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	4b66      	ldr	r3, [pc, #408]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a65      	ldr	r2, [pc, #404]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 8005356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800535a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d013      	beq.n	800538c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005364:	f7fc fd28 	bl	8001db8 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800536c:	f7fc fd24 	bl	8001db8 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b64      	cmp	r3, #100	; 0x64
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e207      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537e:	4b5b      	ldr	r3, [pc, #364]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f0      	beq.n	800536c <HAL_RCC_OscConfig+0xc0>
 800538a:	e014      	b.n	80053b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538c:	f7fc fd14 	bl	8001db8 <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005394:	f7fc fd10 	bl	8001db8 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b64      	cmp	r3, #100	; 0x64
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e1f3      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053a6:	4b51      	ldr	r3, [pc, #324]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1f0      	bne.n	8005394 <HAL_RCC_OscConfig+0xe8>
 80053b2:	e000      	b.n	80053b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d063      	beq.n	800548a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053c2:	4b4a      	ldr	r3, [pc, #296]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00b      	beq.n	80053e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ce:	4b47      	ldr	r3, [pc, #284]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d11c      	bne.n	8005414 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053da:	4b44      	ldr	r3, [pc, #272]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d116      	bne.n	8005414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053e6:	4b41      	ldr	r3, [pc, #260]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <HAL_RCC_OscConfig+0x152>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d001      	beq.n	80053fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e1c7      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053fe:	4b3b      	ldr	r3, [pc, #236]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4937      	ldr	r1, [pc, #220]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 800540e:	4313      	orrs	r3, r2
 8005410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005412:	e03a      	b.n	800548a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d020      	beq.n	800545e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800541c:	4b34      	ldr	r3, [pc, #208]	; (80054f0 <HAL_RCC_OscConfig+0x244>)
 800541e:	2201      	movs	r2, #1
 8005420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005422:	f7fc fcc9 	bl	8001db8 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800542a:	f7fc fcc5 	bl	8001db8 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e1a8      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800543c:	4b2b      	ldr	r3, [pc, #172]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0f0      	beq.n	800542a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005448:	4b28      	ldr	r3, [pc, #160]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4925      	ldr	r1, [pc, #148]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 8005458:	4313      	orrs	r3, r2
 800545a:	600b      	str	r3, [r1, #0]
 800545c:	e015      	b.n	800548a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800545e:	4b24      	ldr	r3, [pc, #144]	; (80054f0 <HAL_RCC_OscConfig+0x244>)
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fc fca8 	bl	8001db8 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800546c:	f7fc fca4 	bl	8001db8 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e187      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800547e:	4b1b      	ldr	r3, [pc, #108]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d036      	beq.n	8005504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d016      	beq.n	80054cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800549e:	4b15      	ldr	r3, [pc, #84]	; (80054f4 <HAL_RCC_OscConfig+0x248>)
 80054a0:	2201      	movs	r2, #1
 80054a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a4:	f7fc fc88 	bl	8001db8 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ac:	f7fc fc84 	bl	8001db8 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e167      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054be:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <HAL_RCC_OscConfig+0x240>)
 80054c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f0      	beq.n	80054ac <HAL_RCC_OscConfig+0x200>
 80054ca:	e01b      	b.n	8005504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054cc:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <HAL_RCC_OscConfig+0x248>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d2:	f7fc fc71 	bl	8001db8 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d8:	e00e      	b.n	80054f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054da:	f7fc fc6d 	bl	8001db8 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d907      	bls.n	80054f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e150      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
 80054ec:	40023800 	.word	0x40023800
 80054f0:	42470000 	.word	0x42470000
 80054f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f8:	4b88      	ldr	r3, [pc, #544]	; (800571c <HAL_RCC_OscConfig+0x470>)
 80054fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1ea      	bne.n	80054da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8097 	beq.w	8005640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005512:	2300      	movs	r3, #0
 8005514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005516:	4b81      	ldr	r3, [pc, #516]	; (800571c <HAL_RCC_OscConfig+0x470>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10f      	bne.n	8005542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005522:	2300      	movs	r3, #0
 8005524:	60bb      	str	r3, [r7, #8]
 8005526:	4b7d      	ldr	r3, [pc, #500]	; (800571c <HAL_RCC_OscConfig+0x470>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	4a7c      	ldr	r2, [pc, #496]	; (800571c <HAL_RCC_OscConfig+0x470>)
 800552c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005530:	6413      	str	r3, [r2, #64]	; 0x40
 8005532:	4b7a      	ldr	r3, [pc, #488]	; (800571c <HAL_RCC_OscConfig+0x470>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553a:	60bb      	str	r3, [r7, #8]
 800553c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800553e:	2301      	movs	r3, #1
 8005540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005542:	4b77      	ldr	r3, [pc, #476]	; (8005720 <HAL_RCC_OscConfig+0x474>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554a:	2b00      	cmp	r3, #0
 800554c:	d118      	bne.n	8005580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800554e:	4b74      	ldr	r3, [pc, #464]	; (8005720 <HAL_RCC_OscConfig+0x474>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a73      	ldr	r2, [pc, #460]	; (8005720 <HAL_RCC_OscConfig+0x474>)
 8005554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800555a:	f7fc fc2d 	bl	8001db8 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005562:	f7fc fc29 	bl	8001db8 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e10c      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005574:	4b6a      	ldr	r3, [pc, #424]	; (8005720 <HAL_RCC_OscConfig+0x474>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f0      	beq.n	8005562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d106      	bne.n	8005596 <HAL_RCC_OscConfig+0x2ea>
 8005588:	4b64      	ldr	r3, [pc, #400]	; (800571c <HAL_RCC_OscConfig+0x470>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	4a63      	ldr	r2, [pc, #396]	; (800571c <HAL_RCC_OscConfig+0x470>)
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	6713      	str	r3, [r2, #112]	; 0x70
 8005594:	e01c      	b.n	80055d0 <HAL_RCC_OscConfig+0x324>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b05      	cmp	r3, #5
 800559c:	d10c      	bne.n	80055b8 <HAL_RCC_OscConfig+0x30c>
 800559e:	4b5f      	ldr	r3, [pc, #380]	; (800571c <HAL_RCC_OscConfig+0x470>)
 80055a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a2:	4a5e      	ldr	r2, [pc, #376]	; (800571c <HAL_RCC_OscConfig+0x470>)
 80055a4:	f043 0304 	orr.w	r3, r3, #4
 80055a8:	6713      	str	r3, [r2, #112]	; 0x70
 80055aa:	4b5c      	ldr	r3, [pc, #368]	; (800571c <HAL_RCC_OscConfig+0x470>)
 80055ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ae:	4a5b      	ldr	r2, [pc, #364]	; (800571c <HAL_RCC_OscConfig+0x470>)
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	6713      	str	r3, [r2, #112]	; 0x70
 80055b6:	e00b      	b.n	80055d0 <HAL_RCC_OscConfig+0x324>
 80055b8:	4b58      	ldr	r3, [pc, #352]	; (800571c <HAL_RCC_OscConfig+0x470>)
 80055ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055bc:	4a57      	ldr	r2, [pc, #348]	; (800571c <HAL_RCC_OscConfig+0x470>)
 80055be:	f023 0301 	bic.w	r3, r3, #1
 80055c2:	6713      	str	r3, [r2, #112]	; 0x70
 80055c4:	4b55      	ldr	r3, [pc, #340]	; (800571c <HAL_RCC_OscConfig+0x470>)
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	4a54      	ldr	r2, [pc, #336]	; (800571c <HAL_RCC_OscConfig+0x470>)
 80055ca:	f023 0304 	bic.w	r3, r3, #4
 80055ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d015      	beq.n	8005604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d8:	f7fc fbee 	bl	8001db8 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055de:	e00a      	b.n	80055f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e0:	f7fc fbea 	bl	8001db8 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e0cb      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f6:	4b49      	ldr	r3, [pc, #292]	; (800571c <HAL_RCC_OscConfig+0x470>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0ee      	beq.n	80055e0 <HAL_RCC_OscConfig+0x334>
 8005602:	e014      	b.n	800562e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005604:	f7fc fbd8 	bl	8001db8 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800560a:	e00a      	b.n	8005622 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800560c:	f7fc fbd4 	bl	8001db8 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	f241 3288 	movw	r2, #5000	; 0x1388
 800561a:	4293      	cmp	r3, r2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e0b5      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005622:	4b3e      	ldr	r3, [pc, #248]	; (800571c <HAL_RCC_OscConfig+0x470>)
 8005624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1ee      	bne.n	800560c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800562e:	7dfb      	ldrb	r3, [r7, #23]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d105      	bne.n	8005640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005634:	4b39      	ldr	r3, [pc, #228]	; (800571c <HAL_RCC_OscConfig+0x470>)
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	4a38      	ldr	r2, [pc, #224]	; (800571c <HAL_RCC_OscConfig+0x470>)
 800563a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800563e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 80a1 	beq.w	800578c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800564a:	4b34      	ldr	r3, [pc, #208]	; (800571c <HAL_RCC_OscConfig+0x470>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	2b08      	cmp	r3, #8
 8005654:	d05c      	beq.n	8005710 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d141      	bne.n	80056e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565e:	4b31      	ldr	r3, [pc, #196]	; (8005724 <HAL_RCC_OscConfig+0x478>)
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005664:	f7fc fba8 	bl	8001db8 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800566c:	f7fc fba4 	bl	8001db8 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e087      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800567e:	4b27      	ldr	r3, [pc, #156]	; (800571c <HAL_RCC_OscConfig+0x470>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f0      	bne.n	800566c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69da      	ldr	r2, [r3, #28]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	019b      	lsls	r3, r3, #6
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a0:	085b      	lsrs	r3, r3, #1
 80056a2:	3b01      	subs	r3, #1
 80056a4:	041b      	lsls	r3, r3, #16
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	061b      	lsls	r3, r3, #24
 80056ae:	491b      	ldr	r1, [pc, #108]	; (800571c <HAL_RCC_OscConfig+0x470>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056b4:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <HAL_RCC_OscConfig+0x478>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ba:	f7fc fb7d 	bl	8001db8 <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c2:	f7fc fb79 	bl	8001db8 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e05c      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d4:	4b11      	ldr	r3, [pc, #68]	; (800571c <HAL_RCC_OscConfig+0x470>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0x416>
 80056e0:	e054      	b.n	800578c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e2:	4b10      	ldr	r3, [pc, #64]	; (8005724 <HAL_RCC_OscConfig+0x478>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e8:	f7fc fb66 	bl	8001db8 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f0:	f7fc fb62 	bl	8001db8 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e045      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005702:	4b06      	ldr	r3, [pc, #24]	; (800571c <HAL_RCC_OscConfig+0x470>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x444>
 800570e:	e03d      	b.n	800578c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d107      	bne.n	8005728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e038      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
 800571c:	40023800 	.word	0x40023800
 8005720:	40007000 	.word	0x40007000
 8005724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005728:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <HAL_RCC_OscConfig+0x4ec>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d028      	beq.n	8005788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005740:	429a      	cmp	r2, r3
 8005742:	d121      	bne.n	8005788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800574e:	429a      	cmp	r2, r3
 8005750:	d11a      	bne.n	8005788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005758:	4013      	ands	r3, r2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800575e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005760:	4293      	cmp	r3, r2
 8005762:	d111      	bne.n	8005788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	3b01      	subs	r3, #1
 8005772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005774:	429a      	cmp	r2, r3
 8005776:	d107      	bne.n	8005788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005784:	429a      	cmp	r2, r3
 8005786:	d001      	beq.n	800578c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	40023800 	.word	0x40023800

0800579c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0cc      	b.n	800594a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057b0:	4b68      	ldr	r3, [pc, #416]	; (8005954 <HAL_RCC_ClockConfig+0x1b8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d90c      	bls.n	80057d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057be:	4b65      	ldr	r3, [pc, #404]	; (8005954 <HAL_RCC_ClockConfig+0x1b8>)
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c6:	4b63      	ldr	r3, [pc, #396]	; (8005954 <HAL_RCC_ClockConfig+0x1b8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d001      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0b8      	b.n	800594a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d020      	beq.n	8005826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057f0:	4b59      	ldr	r3, [pc, #356]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	4a58      	ldr	r2, [pc, #352]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005808:	4b53      	ldr	r3, [pc, #332]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	4a52      	ldr	r2, [pc, #328]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005814:	4b50      	ldr	r3, [pc, #320]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	494d      	ldr	r1, [pc, #308]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	4313      	orrs	r3, r2
 8005824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d044      	beq.n	80058bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d107      	bne.n	800584a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583a:	4b47      	ldr	r3, [pc, #284]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d119      	bne.n	800587a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e07f      	b.n	800594a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d003      	beq.n	800585a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005856:	2b03      	cmp	r3, #3
 8005858:	d107      	bne.n	800586a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800585a:	4b3f      	ldr	r3, [pc, #252]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e06f      	b.n	800594a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800586a:	4b3b      	ldr	r3, [pc, #236]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e067      	b.n	800594a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800587a:	4b37      	ldr	r3, [pc, #220]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f023 0203 	bic.w	r2, r3, #3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	4934      	ldr	r1, [pc, #208]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 8005888:	4313      	orrs	r3, r2
 800588a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800588c:	f7fc fa94 	bl	8001db8 <HAL_GetTick>
 8005890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005892:	e00a      	b.n	80058aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005894:	f7fc fa90 	bl	8001db8 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e04f      	b.n	800594a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058aa:	4b2b      	ldr	r3, [pc, #172]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 020c 	and.w	r2, r3, #12
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d1eb      	bne.n	8005894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058bc:	4b25      	ldr	r3, [pc, #148]	; (8005954 <HAL_RCC_ClockConfig+0x1b8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d20c      	bcs.n	80058e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ca:	4b22      	ldr	r3, [pc, #136]	; (8005954 <HAL_RCC_ClockConfig+0x1b8>)
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d2:	4b20      	ldr	r3, [pc, #128]	; (8005954 <HAL_RCC_ClockConfig+0x1b8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d001      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e032      	b.n	800594a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058f0:	4b19      	ldr	r3, [pc, #100]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4916      	ldr	r1, [pc, #88]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800590e:	4b12      	ldr	r3, [pc, #72]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	490e      	ldr	r1, [pc, #56]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005922:	f000 f821 	bl	8005968 <HAL_RCC_GetSysClockFreq>
 8005926:	4602      	mov	r2, r0
 8005928:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	091b      	lsrs	r3, r3, #4
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	490a      	ldr	r1, [pc, #40]	; (800595c <HAL_RCC_ClockConfig+0x1c0>)
 8005934:	5ccb      	ldrb	r3, [r1, r3]
 8005936:	fa22 f303 	lsr.w	r3, r2, r3
 800593a:	4a09      	ldr	r2, [pc, #36]	; (8005960 <HAL_RCC_ClockConfig+0x1c4>)
 800593c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800593e:	4b09      	ldr	r3, [pc, #36]	; (8005964 <HAL_RCC_ClockConfig+0x1c8>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f7fc f9f4 	bl	8001d30 <HAL_InitTick>

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	40023c00 	.word	0x40023c00
 8005958:	40023800 	.word	0x40023800
 800595c:	08007d98 	.word	0x08007d98
 8005960:	20000000 	.word	0x20000000
 8005964:	20000004 	.word	0x20000004

08005968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800596c:	b094      	sub	sp, #80	; 0x50
 800596e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	647b      	str	r3, [r7, #68]	; 0x44
 8005974:	2300      	movs	r3, #0
 8005976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005978:	2300      	movs	r3, #0
 800597a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005980:	4b79      	ldr	r3, [pc, #484]	; (8005b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 030c 	and.w	r3, r3, #12
 8005988:	2b08      	cmp	r3, #8
 800598a:	d00d      	beq.n	80059a8 <HAL_RCC_GetSysClockFreq+0x40>
 800598c:	2b08      	cmp	r3, #8
 800598e:	f200 80e1 	bhi.w	8005b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <HAL_RCC_GetSysClockFreq+0x34>
 8005996:	2b04      	cmp	r3, #4
 8005998:	d003      	beq.n	80059a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800599a:	e0db      	b.n	8005b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800599c:	4b73      	ldr	r3, [pc, #460]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800599e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80059a0:	e0db      	b.n	8005b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059a2:	4b73      	ldr	r3, [pc, #460]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x208>)
 80059a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059a6:	e0d8      	b.n	8005b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059a8:	4b6f      	ldr	r3, [pc, #444]	; (8005b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059b2:	4b6d      	ldr	r3, [pc, #436]	; (8005b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d063      	beq.n	8005a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059be:	4b6a      	ldr	r3, [pc, #424]	; (8005b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	099b      	lsrs	r3, r3, #6
 80059c4:	2200      	movs	r2, #0
 80059c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80059c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d0:	633b      	str	r3, [r7, #48]	; 0x30
 80059d2:	2300      	movs	r3, #0
 80059d4:	637b      	str	r3, [r7, #52]	; 0x34
 80059d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059da:	4622      	mov	r2, r4
 80059dc:	462b      	mov	r3, r5
 80059de:	f04f 0000 	mov.w	r0, #0
 80059e2:	f04f 0100 	mov.w	r1, #0
 80059e6:	0159      	lsls	r1, r3, #5
 80059e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059ec:	0150      	lsls	r0, r2, #5
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4621      	mov	r1, r4
 80059f4:	1a51      	subs	r1, r2, r1
 80059f6:	6139      	str	r1, [r7, #16]
 80059f8:	4629      	mov	r1, r5
 80059fa:	eb63 0301 	sbc.w	r3, r3, r1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	f04f 0300 	mov.w	r3, #0
 8005a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	018b      	lsls	r3, r1, #6
 8005a10:	4651      	mov	r1, sl
 8005a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a16:	4651      	mov	r1, sl
 8005a18:	018a      	lsls	r2, r1, #6
 8005a1a:	4651      	mov	r1, sl
 8005a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8005a20:	4659      	mov	r1, fp
 8005a22:	eb63 0901 	sbc.w	r9, r3, r1
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	f04f 0300 	mov.w	r3, #0
 8005a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a3a:	4690      	mov	r8, r2
 8005a3c:	4699      	mov	r9, r3
 8005a3e:	4623      	mov	r3, r4
 8005a40:	eb18 0303 	adds.w	r3, r8, r3
 8005a44:	60bb      	str	r3, [r7, #8]
 8005a46:	462b      	mov	r3, r5
 8005a48:	eb49 0303 	adc.w	r3, r9, r3
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	f04f 0300 	mov.w	r3, #0
 8005a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	024b      	lsls	r3, r1, #9
 8005a5e:	4621      	mov	r1, r4
 8005a60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a64:	4621      	mov	r1, r4
 8005a66:	024a      	lsls	r2, r1, #9
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a6e:	2200      	movs	r2, #0
 8005a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a78:	f7fb f894 	bl	8000ba4 <__aeabi_uldivmod>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4613      	mov	r3, r2
 8005a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a84:	e058      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a86:	4b38      	ldr	r3, [pc, #224]	; (8005b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	099b      	lsrs	r3, r3, #6
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	4611      	mov	r1, r2
 8005a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a96:	623b      	str	r3, [r7, #32]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	f04f 0000 	mov.w	r0, #0
 8005aa8:	f04f 0100 	mov.w	r1, #0
 8005aac:	0159      	lsls	r1, r3, #5
 8005aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ab2:	0150      	lsls	r0, r2, #5
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4641      	mov	r1, r8
 8005aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8005abe:	4649      	mov	r1, r9
 8005ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8005adc:	eb63 050b 	sbc.w	r5, r3, fp
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	00eb      	lsls	r3, r5, #3
 8005aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aee:	00e2      	lsls	r2, r4, #3
 8005af0:	4614      	mov	r4, r2
 8005af2:	461d      	mov	r5, r3
 8005af4:	4643      	mov	r3, r8
 8005af6:	18e3      	adds	r3, r4, r3
 8005af8:	603b      	str	r3, [r7, #0]
 8005afa:	464b      	mov	r3, r9
 8005afc:	eb45 0303 	adc.w	r3, r5, r3
 8005b00:	607b      	str	r3, [r7, #4]
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	f04f 0300 	mov.w	r3, #0
 8005b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b0e:	4629      	mov	r1, r5
 8005b10:	028b      	lsls	r3, r1, #10
 8005b12:	4621      	mov	r1, r4
 8005b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b18:	4621      	mov	r1, r4
 8005b1a:	028a      	lsls	r2, r1, #10
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b22:	2200      	movs	r2, #0
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	61fa      	str	r2, [r7, #28]
 8005b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b2c:	f7fb f83a 	bl	8000ba4 <__aeabi_uldivmod>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4613      	mov	r3, r2
 8005b36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b38:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	0c1b      	lsrs	r3, r3, #16
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	3301      	adds	r3, #1
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b52:	e002      	b.n	8005b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3750      	adds	r7, #80	; 0x50
 8005b60:	46bd      	mov	sp, r7
 8005b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b66:	bf00      	nop
 8005b68:	40023800 	.word	0x40023800
 8005b6c:	00f42400 	.word	0x00f42400
 8005b70:	007a1200 	.word	0x007a1200

08005b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b78:	4b03      	ldr	r3, [pc, #12]	; (8005b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	20000000 	.word	0x20000000

08005b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b90:	f7ff fff0 	bl	8005b74 <HAL_RCC_GetHCLKFreq>
 8005b94:	4602      	mov	r2, r0
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	0a9b      	lsrs	r3, r3, #10
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	4903      	ldr	r1, [pc, #12]	; (8005bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ba2:	5ccb      	ldrb	r3, [r1, r3]
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	08007da8 	.word	0x08007da8

08005bb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e041      	b.n	8005c4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fb feb8 	bl	8001950 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	f000 fc70 	bl	80064d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	bf0c      	ite	eq
 8005c78:	2301      	moveq	r3, #1
 8005c7a:	2300      	movne	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	e022      	b.n	8005cc6 <HAL_TIM_PWM_Start_DMA+0x72>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d109      	bne.n	8005c9a <HAL_TIM_PWM_Start_DMA+0x46>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	bf0c      	ite	eq
 8005c92:	2301      	moveq	r3, #1
 8005c94:	2300      	movne	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	e015      	b.n	8005cc6 <HAL_TIM_PWM_Start_DMA+0x72>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d109      	bne.n	8005cb4 <HAL_TIM_PWM_Start_DMA+0x60>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	bf0c      	ite	eq
 8005cac:	2301      	moveq	r3, #1
 8005cae:	2300      	movne	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	e008      	b.n	8005cc6 <HAL_TIM_PWM_Start_DMA+0x72>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e171      	b.n	8005fb2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <HAL_TIM_PWM_Start_DMA+0x94>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	bf0c      	ite	eq
 8005ce0:	2301      	moveq	r3, #1
 8005ce2:	2300      	movne	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	e022      	b.n	8005d2e <HAL_TIM_PWM_Start_DMA+0xda>
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d109      	bne.n	8005d02 <HAL_TIM_PWM_Start_DMA+0xae>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	bf0c      	ite	eq
 8005cfa:	2301      	moveq	r3, #1
 8005cfc:	2300      	movne	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	e015      	b.n	8005d2e <HAL_TIM_PWM_Start_DMA+0xda>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d109      	bne.n	8005d1c <HAL_TIM_PWM_Start_DMA+0xc8>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	bf0c      	ite	eq
 8005d14:	2301      	moveq	r3, #1
 8005d16:	2300      	movne	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	e008      	b.n	8005d2e <HAL_TIM_PWM_Start_DMA+0xda>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	bf0c      	ite	eq
 8005d28:	2301      	moveq	r3, #1
 8005d2a:	2300      	movne	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d024      	beq.n	8005d7c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <HAL_TIM_PWM_Start_DMA+0xea>
 8005d38:	887b      	ldrh	r3, [r7, #2]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e137      	b.n	8005fb2 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d104      	bne.n	8005d52 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d50:	e016      	b.n	8005d80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d104      	bne.n	8005d62 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d60:	e00e      	b.n	8005d80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d104      	bne.n	8005d72 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d70:	e006      	b.n	8005d80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2202      	movs	r2, #2
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d7a:	e001      	b.n	8005d80 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e118      	b.n	8005fb2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b0c      	cmp	r3, #12
 8005d84:	f200 80ae 	bhi.w	8005ee4 <HAL_TIM_PWM_Start_DMA+0x290>
 8005d88:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8e:	bf00      	nop
 8005d90:	08005dc5 	.word	0x08005dc5
 8005d94:	08005ee5 	.word	0x08005ee5
 8005d98:	08005ee5 	.word	0x08005ee5
 8005d9c:	08005ee5 	.word	0x08005ee5
 8005da0:	08005e0d 	.word	0x08005e0d
 8005da4:	08005ee5 	.word	0x08005ee5
 8005da8:	08005ee5 	.word	0x08005ee5
 8005dac:	08005ee5 	.word	0x08005ee5
 8005db0:	08005e55 	.word	0x08005e55
 8005db4:	08005ee5 	.word	0x08005ee5
 8005db8:	08005ee5 	.word	0x08005ee5
 8005dbc:	08005ee5 	.word	0x08005ee5
 8005dc0:	08005e9d 	.word	0x08005e9d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	4a7c      	ldr	r2, [pc, #496]	; (8005fbc <HAL_TIM_PWM_Start_DMA+0x368>)
 8005dca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	4a7b      	ldr	r2, [pc, #492]	; (8005fc0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	4a7a      	ldr	r2, [pc, #488]	; (8005fc4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005dda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3334      	adds	r3, #52	; 0x34
 8005de8:	461a      	mov	r2, r3
 8005dea:	887b      	ldrh	r3, [r7, #2]
 8005dec:	f7fc f9d4 	bl	8002198 <HAL_DMA_Start_IT>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e0db      	b.n	8005fb2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e08:	60da      	str	r2, [r3, #12]
      break;
 8005e0a:	e06e      	b.n	8005eea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e10:	4a6a      	ldr	r2, [pc, #424]	; (8005fbc <HAL_TIM_PWM_Start_DMA+0x368>)
 8005e12:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	4a69      	ldr	r2, [pc, #420]	; (8005fc0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005e1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	4a68      	ldr	r2, [pc, #416]	; (8005fc4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005e22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3338      	adds	r3, #56	; 0x38
 8005e30:	461a      	mov	r2, r3
 8005e32:	887b      	ldrh	r3, [r7, #2]
 8005e34:	f7fc f9b0 	bl	8002198 <HAL_DMA_Start_IT>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e0b7      	b.n	8005fb2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e50:	60da      	str	r2, [r3, #12]
      break;
 8005e52:	e04a      	b.n	8005eea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	4a58      	ldr	r2, [pc, #352]	; (8005fbc <HAL_TIM_PWM_Start_DMA+0x368>)
 8005e5a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	4a57      	ldr	r2, [pc, #348]	; (8005fc0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	4a56      	ldr	r2, [pc, #344]	; (8005fc4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005e6a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	333c      	adds	r3, #60	; 0x3c
 8005e78:	461a      	mov	r2, r3
 8005e7a:	887b      	ldrh	r3, [r7, #2]
 8005e7c:	f7fc f98c 	bl	8002198 <HAL_DMA_Start_IT>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e093      	b.n	8005fb2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e98:	60da      	str	r2, [r3, #12]
      break;
 8005e9a:	e026      	b.n	8005eea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	4a46      	ldr	r2, [pc, #280]	; (8005fbc <HAL_TIM_PWM_Start_DMA+0x368>)
 8005ea2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	4a45      	ldr	r2, [pc, #276]	; (8005fc0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005eaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	4a44      	ldr	r2, [pc, #272]	; (8005fc4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005eb2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3340      	adds	r3, #64	; 0x40
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	887b      	ldrh	r3, [r7, #2]
 8005ec4:	f7fc f968 	bl	8002198 <HAL_DMA_Start_IT>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e06f      	b.n	8005fb2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ee0:	60da      	str	r2, [r3, #12]
      break;
 8005ee2:	e002      	b.n	8005eea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ee8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d15f      	bne.n	8005fb0 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fd49 	bl	8006990 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a31      	ldr	r2, [pc, #196]	; (8005fc8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d004      	beq.n	8005f12 <HAL_TIM_PWM_Start_DMA+0x2be>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a2f      	ldr	r2, [pc, #188]	; (8005fcc <HAL_TIM_PWM_Start_DMA+0x378>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d101      	bne.n	8005f16 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005f16:	2300      	movs	r3, #0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f2a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a25      	ldr	r2, [pc, #148]	; (8005fc8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d022      	beq.n	8005f7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3e:	d01d      	beq.n	8005f7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d018      	beq.n	8005f7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a21      	ldr	r2, [pc, #132]	; (8005fd4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d013      	beq.n	8005f7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1f      	ldr	r2, [pc, #124]	; (8005fd8 <HAL_TIM_PWM_Start_DMA+0x384>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00e      	beq.n	8005f7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1a      	ldr	r2, [pc, #104]	; (8005fcc <HAL_TIM_PWM_Start_DMA+0x378>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d009      	beq.n	8005f7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1b      	ldr	r2, [pc, #108]	; (8005fdc <HAL_TIM_PWM_Start_DMA+0x388>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_TIM_PWM_Start_DMA+0x328>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1a      	ldr	r2, [pc, #104]	; (8005fe0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d111      	bne.n	8005fa0 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2b06      	cmp	r3, #6
 8005f8c:	d010      	beq.n	8005fb0 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0201 	orr.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9e:	e007      	b.n	8005fb0 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	080063c7 	.word	0x080063c7
 8005fc0:	0800646f 	.word	0x0800646f
 8005fc4:	08006335 	.word	0x08006335
 8005fc8:	40010000 	.word	0x40010000
 8005fcc:	40010400 	.word	0x40010400
 8005fd0:	40000400 	.word	0x40000400
 8005fd4:	40000800 	.word	0x40000800
 8005fd8:	40000c00 	.word	0x40000c00
 8005fdc:	40014000 	.word	0x40014000
 8005fe0:	40001800 	.word	0x40001800

08005fe4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b0c      	cmp	r3, #12
 8005ff6:	d855      	bhi.n	80060a4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005ff8:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffe:	bf00      	nop
 8006000:	08006035 	.word	0x08006035
 8006004:	080060a5 	.word	0x080060a5
 8006008:	080060a5 	.word	0x080060a5
 800600c:	080060a5 	.word	0x080060a5
 8006010:	08006051 	.word	0x08006051
 8006014:	080060a5 	.word	0x080060a5
 8006018:	080060a5 	.word	0x080060a5
 800601c:	080060a5 	.word	0x080060a5
 8006020:	0800606d 	.word	0x0800606d
 8006024:	080060a5 	.word	0x080060a5
 8006028:	080060a5 	.word	0x080060a5
 800602c:	080060a5 	.word	0x080060a5
 8006030:	08006089 	.word	0x08006089
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006042:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	4618      	mov	r0, r3
 800604a:	f7fc f8fd 	bl	8002248 <HAL_DMA_Abort_IT>
      break;
 800604e:	e02c      	b.n	80060aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006064:	4618      	mov	r0, r3
 8006066:	f7fc f8ef 	bl	8002248 <HAL_DMA_Abort_IT>
      break;
 800606a:	e01e      	b.n	80060aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800607a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	4618      	mov	r0, r3
 8006082:	f7fc f8e1 	bl	8002248 <HAL_DMA_Abort_IT>
      break;
 8006086:	e010      	b.n	80060aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006096:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609c:	4618      	mov	r0, r3
 800609e:	f7fc f8d3 	bl	8002248 <HAL_DMA_Abort_IT>
      break;
 80060a2:	e002      	b.n	80060aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	73fb      	strb	r3, [r7, #15]
      break;
 80060a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d161      	bne.n	8006174 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2200      	movs	r2, #0
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fc69 	bl	8006990 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a2f      	ldr	r2, [pc, #188]	; (8006180 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d004      	beq.n	80060d2 <HAL_TIM_PWM_Stop_DMA+0xee>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a2d      	ldr	r2, [pc, #180]	; (8006184 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d101      	bne.n	80060d6 <HAL_TIM_PWM_Stop_DMA+0xf2>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e000      	b.n	80060d8 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80060d6:	2300      	movs	r3, #0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d017      	beq.n	800610c <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6a1a      	ldr	r2, [r3, #32]
 80060e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80060e6:	4013      	ands	r3, r2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10f      	bne.n	800610c <HAL_TIM_PWM_Stop_DMA+0x128>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6a1a      	ldr	r2, [r3, #32]
 80060f2:	f240 4344 	movw	r3, #1092	; 0x444
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d107      	bne.n	800610c <HAL_TIM_PWM_Stop_DMA+0x128>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800610a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6a1a      	ldr	r2, [r3, #32]
 8006112:	f241 1311 	movw	r3, #4369	; 0x1111
 8006116:	4013      	ands	r3, r2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10f      	bne.n	800613c <HAL_TIM_PWM_Stop_DMA+0x158>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6a1a      	ldr	r2, [r3, #32]
 8006122:	f240 4344 	movw	r3, #1092	; 0x444
 8006126:	4013      	ands	r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d107      	bne.n	800613c <HAL_TIM_PWM_Stop_DMA+0x158>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0201 	bic.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d104      	bne.n	800614c <HAL_TIM_PWM_Stop_DMA+0x168>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800614a:	e013      	b.n	8006174 <HAL_TIM_PWM_Stop_DMA+0x190>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b04      	cmp	r3, #4
 8006150:	d104      	bne.n	800615c <HAL_TIM_PWM_Stop_DMA+0x178>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800615a:	e00b      	b.n	8006174 <HAL_TIM_PWM_Stop_DMA+0x190>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b08      	cmp	r3, #8
 8006160:	d104      	bne.n	800616c <HAL_TIM_PWM_Stop_DMA+0x188>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800616a:	e003      	b.n	8006174 <HAL_TIM_PWM_Stop_DMA+0x190>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40010000 	.word	0x40010000
 8006184:	40010400 	.word	0x40010400

08006188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e0ae      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b0c      	cmp	r3, #12
 80061b2:	f200 809f 	bhi.w	80062f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061f1 	.word	0x080061f1
 80061c0:	080062f5 	.word	0x080062f5
 80061c4:	080062f5 	.word	0x080062f5
 80061c8:	080062f5 	.word	0x080062f5
 80061cc:	08006231 	.word	0x08006231
 80061d0:	080062f5 	.word	0x080062f5
 80061d4:	080062f5 	.word	0x080062f5
 80061d8:	080062f5 	.word	0x080062f5
 80061dc:	08006273 	.word	0x08006273
 80061e0:	080062f5 	.word	0x080062f5
 80061e4:	080062f5 	.word	0x080062f5
 80061e8:	080062f5 	.word	0x080062f5
 80061ec:	080062b3 	.word	0x080062b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fa1a 	bl	8006630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699a      	ldr	r2, [r3, #24]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0208 	orr.w	r2, r2, #8
 800620a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0204 	bic.w	r2, r2, #4
 800621a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6999      	ldr	r1, [r3, #24]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	619a      	str	r2, [r3, #24]
      break;
 800622e:	e064      	b.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fa6a 	bl	8006710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800624a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6999      	ldr	r1, [r3, #24]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	021a      	lsls	r2, r3, #8
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	619a      	str	r2, [r3, #24]
      break;
 8006270:	e043      	b.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fabf 	bl	80067fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0208 	orr.w	r2, r2, #8
 800628c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69da      	ldr	r2, [r3, #28]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0204 	bic.w	r2, r2, #4
 800629c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69d9      	ldr	r1, [r3, #28]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	61da      	str	r2, [r3, #28]
      break;
 80062b0:	e023      	b.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fb13 	bl	80068e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69d9      	ldr	r1, [r3, #28]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	021a      	lsls	r2, r3, #8
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	61da      	str	r2, [r3, #28]
      break;
 80062f2:	e002      	b.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	75fb      	strb	r3, [r7, #23]
      break;
 80062f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006302:	7dfb      	ldrb	r3, [r7, #23]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	429a      	cmp	r2, r3
 800634a:	d107      	bne.n	800635c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800635a:	e02a      	b.n	80063b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	429a      	cmp	r2, r3
 8006364:	d107      	bne.n	8006376 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2202      	movs	r2, #2
 800636a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006374:	e01d      	b.n	80063b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	d107      	bne.n	8006390 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2204      	movs	r2, #4
 8006384:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800638e:	e010      	b.n	80063b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	429a      	cmp	r2, r3
 8006398:	d107      	bne.n	80063aa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2208      	movs	r2, #8
 800639e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063a8:	e003      	b.n	80063b2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f7ff ffb4 	bl	8006320 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	771a      	strb	r2, [r3, #28]
}
 80063be:	bf00      	nop
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d10b      	bne.n	80063f6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d136      	bne.n	800645a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f4:	e031      	b.n	800645a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d10b      	bne.n	8006418 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2202      	movs	r2, #2
 8006404:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d125      	bne.n	800645a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006416:	e020      	b.n	800645a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	429a      	cmp	r2, r3
 8006420:	d10b      	bne.n	800643a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2204      	movs	r2, #4
 8006426:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d114      	bne.n	800645a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006438:	e00f      	b.n	800645a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	429a      	cmp	r2, r3
 8006442:	d10a      	bne.n	800645a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2208      	movs	r2, #8
 8006448:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d103      	bne.n	800645a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7fa ff24 	bl	80012a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	771a      	strb	r2, [r3, #28]
}
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b084      	sub	sp, #16
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	429a      	cmp	r2, r3
 8006484:	d103      	bne.n	800648e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	771a      	strb	r2, [r3, #28]
 800648c:	e019      	b.n	80064c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	429a      	cmp	r2, r3
 8006496:	d103      	bne.n	80064a0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2202      	movs	r2, #2
 800649c:	771a      	strb	r2, [r3, #28]
 800649e:	e010      	b.n	80064c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d103      	bne.n	80064b2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2204      	movs	r2, #4
 80064ae:	771a      	strb	r2, [r3, #28]
 80064b0:	e007      	b.n	80064c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d102      	bne.n	80064c2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2208      	movs	r2, #8
 80064c0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7ff ff22 	bl	800630c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	771a      	strb	r2, [r3, #28]
}
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a46      	ldr	r2, [pc, #280]	; (8006604 <TIM_Base_SetConfig+0x12c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d013      	beq.n	8006518 <TIM_Base_SetConfig+0x40>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f6:	d00f      	beq.n	8006518 <TIM_Base_SetConfig+0x40>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a43      	ldr	r2, [pc, #268]	; (8006608 <TIM_Base_SetConfig+0x130>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00b      	beq.n	8006518 <TIM_Base_SetConfig+0x40>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a42      	ldr	r2, [pc, #264]	; (800660c <TIM_Base_SetConfig+0x134>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d007      	beq.n	8006518 <TIM_Base_SetConfig+0x40>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a41      	ldr	r2, [pc, #260]	; (8006610 <TIM_Base_SetConfig+0x138>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_Base_SetConfig+0x40>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a40      	ldr	r2, [pc, #256]	; (8006614 <TIM_Base_SetConfig+0x13c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d108      	bne.n	800652a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a35      	ldr	r2, [pc, #212]	; (8006604 <TIM_Base_SetConfig+0x12c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d02b      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006538:	d027      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a32      	ldr	r2, [pc, #200]	; (8006608 <TIM_Base_SetConfig+0x130>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d023      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a31      	ldr	r2, [pc, #196]	; (800660c <TIM_Base_SetConfig+0x134>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d01f      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a30      	ldr	r2, [pc, #192]	; (8006610 <TIM_Base_SetConfig+0x138>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d01b      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a2f      	ldr	r2, [pc, #188]	; (8006614 <TIM_Base_SetConfig+0x13c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d017      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a2e      	ldr	r2, [pc, #184]	; (8006618 <TIM_Base_SetConfig+0x140>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d013      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a2d      	ldr	r2, [pc, #180]	; (800661c <TIM_Base_SetConfig+0x144>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00f      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a2c      	ldr	r2, [pc, #176]	; (8006620 <TIM_Base_SetConfig+0x148>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00b      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a2b      	ldr	r2, [pc, #172]	; (8006624 <TIM_Base_SetConfig+0x14c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d007      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a2a      	ldr	r2, [pc, #168]	; (8006628 <TIM_Base_SetConfig+0x150>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d003      	beq.n	800658a <TIM_Base_SetConfig+0xb2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a29      	ldr	r2, [pc, #164]	; (800662c <TIM_Base_SetConfig+0x154>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d108      	bne.n	800659c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a10      	ldr	r2, [pc, #64]	; (8006604 <TIM_Base_SetConfig+0x12c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <TIM_Base_SetConfig+0xf8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a12      	ldr	r2, [pc, #72]	; (8006614 <TIM_Base_SetConfig+0x13c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d103      	bne.n	80065d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	691a      	ldr	r2, [r3, #16]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d105      	bne.n	80065f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f023 0201 	bic.w	r2, r3, #1
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	611a      	str	r2, [r3, #16]
  }
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40010000 	.word	0x40010000
 8006608:	40000400 	.word	0x40000400
 800660c:	40000800 	.word	0x40000800
 8006610:	40000c00 	.word	0x40000c00
 8006614:	40010400 	.word	0x40010400
 8006618:	40014000 	.word	0x40014000
 800661c:	40014400 	.word	0x40014400
 8006620:	40014800 	.word	0x40014800
 8006624:	40001800 	.word	0x40001800
 8006628:	40001c00 	.word	0x40001c00
 800662c:	40002000 	.word	0x40002000

08006630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	f023 0201 	bic.w	r2, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f023 0302 	bic.w	r3, r3, #2
 8006678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a20      	ldr	r2, [pc, #128]	; (8006708 <TIM_OC1_SetConfig+0xd8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_OC1_SetConfig+0x64>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a1f      	ldr	r2, [pc, #124]	; (800670c <TIM_OC1_SetConfig+0xdc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d10c      	bne.n	80066ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f023 0308 	bic.w	r3, r3, #8
 800669a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f023 0304 	bic.w	r3, r3, #4
 80066ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a15      	ldr	r2, [pc, #84]	; (8006708 <TIM_OC1_SetConfig+0xd8>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d003      	beq.n	80066be <TIM_OC1_SetConfig+0x8e>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a14      	ldr	r2, [pc, #80]	; (800670c <TIM_OC1_SetConfig+0xdc>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d111      	bne.n	80066e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	621a      	str	r2, [r3, #32]
}
 80066fc:	bf00      	nop
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	40010000 	.word	0x40010000
 800670c:	40010400 	.word	0x40010400

08006710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f023 0210 	bic.w	r2, r3, #16
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	021b      	lsls	r3, r3, #8
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f023 0320 	bic.w	r3, r3, #32
 800675a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a22      	ldr	r2, [pc, #136]	; (80067f4 <TIM_OC2_SetConfig+0xe4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <TIM_OC2_SetConfig+0x68>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a21      	ldr	r2, [pc, #132]	; (80067f8 <TIM_OC2_SetConfig+0xe8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d10d      	bne.n	8006794 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800677e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006792:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a17      	ldr	r2, [pc, #92]	; (80067f4 <TIM_OC2_SetConfig+0xe4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d003      	beq.n	80067a4 <TIM_OC2_SetConfig+0x94>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a16      	ldr	r2, [pc, #88]	; (80067f8 <TIM_OC2_SetConfig+0xe8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d113      	bne.n	80067cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	621a      	str	r2, [r3, #32]
}
 80067e6:	bf00      	nop
 80067e8:	371c      	adds	r7, #28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40010400 	.word	0x40010400

080067fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0303 	bic.w	r3, r3, #3
 8006832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a21      	ldr	r2, [pc, #132]	; (80068dc <TIM_OC3_SetConfig+0xe0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_OC3_SetConfig+0x66>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a20      	ldr	r2, [pc, #128]	; (80068e0 <TIM_OC3_SetConfig+0xe4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d10d      	bne.n	800687e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800687c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a16      	ldr	r2, [pc, #88]	; (80068dc <TIM_OC3_SetConfig+0xe0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d003      	beq.n	800688e <TIM_OC3_SetConfig+0x92>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <TIM_OC3_SetConfig+0xe4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d113      	bne.n	80068b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800689c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	621a      	str	r2, [r3, #32]
}
 80068d0:	bf00      	nop
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	40010000 	.word	0x40010000
 80068e0:	40010400 	.word	0x40010400

080068e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800691a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	021b      	lsls	r3, r3, #8
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800692e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	031b      	lsls	r3, r3, #12
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a12      	ldr	r2, [pc, #72]	; (8006988 <TIM_OC4_SetConfig+0xa4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_OC4_SetConfig+0x68>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a11      	ldr	r2, [pc, #68]	; (800698c <TIM_OC4_SetConfig+0xa8>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d109      	bne.n	8006960 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	019b      	lsls	r3, r3, #6
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	621a      	str	r2, [r3, #32]
}
 800697a:	bf00      	nop
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	40010000 	.word	0x40010000
 800698c:	40010400 	.word	0x40010400

08006990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f003 031f 	and.w	r3, r3, #31
 80069a2:	2201      	movs	r2, #1
 80069a4:	fa02 f303 	lsl.w	r3, r2, r3
 80069a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a1a      	ldr	r2, [r3, #32]
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	43db      	mvns	r3, r3
 80069b2:	401a      	ands	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a1a      	ldr	r2, [r3, #32]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 031f 	and.w	r3, r3, #31
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	fa01 f303 	lsl.w	r3, r1, r3
 80069c8:	431a      	orrs	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	621a      	str	r2, [r3, #32]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
	...

080069dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e05a      	b.n	8006aaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a21      	ldr	r2, [pc, #132]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d022      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a40:	d01d      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1d      	ldr	r2, [pc, #116]	; (8006abc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d018      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1b      	ldr	r2, [pc, #108]	; (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1a      	ldr	r2, [pc, #104]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00e      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a18      	ldr	r2, [pc, #96]	; (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d009      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a17      	ldr	r2, [pc, #92]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d004      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a15      	ldr	r2, [pc, #84]	; (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d10c      	bne.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	40010400 	.word	0x40010400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40001800 	.word	0x40001800

08006ad4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e03d      	b.n	8006b6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <tan>:
 8006b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b7a:	ec53 2b10 	vmov	r2, r3, d0
 8006b7e:	4816      	ldr	r0, [pc, #88]	; (8006bd8 <tan+0x60>)
 8006b80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b84:	4281      	cmp	r1, r0
 8006b86:	dc07      	bgt.n	8006b98 <tan+0x20>
 8006b88:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8006bd0 <tan+0x58>
 8006b8c:	2001      	movs	r0, #1
 8006b8e:	b005      	add	sp, #20
 8006b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b94:	f000 b824 	b.w	8006be0 <__kernel_tan>
 8006b98:	4810      	ldr	r0, [pc, #64]	; (8006bdc <tan+0x64>)
 8006b9a:	4281      	cmp	r1, r0
 8006b9c:	dd09      	ble.n	8006bb2 <tan+0x3a>
 8006b9e:	ee10 0a10 	vmov	r0, s0
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	f7f9 fb14 	bl	80001d0 <__aeabi_dsub>
 8006ba8:	ec41 0b10 	vmov	d0, r0, r1
 8006bac:	b005      	add	sp, #20
 8006bae:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bb2:	4668      	mov	r0, sp
 8006bb4:	f000 fa20 	bl	8006ff8 <__ieee754_rem_pio2>
 8006bb8:	0040      	lsls	r0, r0, #1
 8006bba:	f000 0002 	and.w	r0, r0, #2
 8006bbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bc2:	ed9d 0b00 	vldr	d0, [sp]
 8006bc6:	f1c0 0001 	rsb	r0, r0, #1
 8006bca:	f000 f809 	bl	8006be0 <__kernel_tan>
 8006bce:	e7ed      	b.n	8006bac <tan+0x34>
	...
 8006bd8:	3fe921fb 	.word	0x3fe921fb
 8006bdc:	7fefffff 	.word	0x7fefffff

08006be0 <__kernel_tan>:
 8006be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be4:	ed2d 8b06 	vpush	{d8-d10}
 8006be8:	ec5b ab10 	vmov	sl, fp, d0
 8006bec:	4be0      	ldr	r3, [pc, #896]	; (8006f70 <__kernel_tan+0x390>)
 8006bee:	b083      	sub	sp, #12
 8006bf0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8006bf4:	429f      	cmp	r7, r3
 8006bf6:	ec59 8b11 	vmov	r8, r9, d1
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	f8cd b000 	str.w	fp, [sp]
 8006c00:	dc61      	bgt.n	8006cc6 <__kernel_tan+0xe6>
 8006c02:	ee10 0a10 	vmov	r0, s0
 8006c06:	4659      	mov	r1, fp
 8006c08:	f7f9 ff34 	bl	8000a74 <__aeabi_d2iz>
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	f040 8083 	bne.w	8006d1a <__kernel_tan+0x13a>
 8006c14:	1c73      	adds	r3, r6, #1
 8006c16:	4652      	mov	r2, sl
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	433b      	orrs	r3, r7
 8006c1c:	d112      	bne.n	8006c44 <__kernel_tan+0x64>
 8006c1e:	ec4b ab10 	vmov	d0, sl, fp
 8006c22:	f000 fbef 	bl	8007404 <fabs>
 8006c26:	49d3      	ldr	r1, [pc, #844]	; (8006f74 <__kernel_tan+0x394>)
 8006c28:	ec53 2b10 	vmov	r2, r3, d0
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	f7f9 fdb1 	bl	8000794 <__aeabi_ddiv>
 8006c32:	4682      	mov	sl, r0
 8006c34:	468b      	mov	fp, r1
 8006c36:	ec4b ab10 	vmov	d0, sl, fp
 8006c3a:	b003      	add	sp, #12
 8006c3c:	ecbd 8b06 	vpop	{d8-d10}
 8006c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c44:	2e01      	cmp	r6, #1
 8006c46:	d0f6      	beq.n	8006c36 <__kernel_tan+0x56>
 8006c48:	4642      	mov	r2, r8
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	4650      	mov	r0, sl
 8006c4e:	4659      	mov	r1, fp
 8006c50:	f7f9 fac0 	bl	80001d4 <__adddf3>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	460f      	mov	r7, r1
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	49c6      	ldr	r1, [pc, #792]	; (8006f78 <__kernel_tan+0x398>)
 8006c5e:	f7f9 fd99 	bl	8000794 <__aeabi_ddiv>
 8006c62:	e9cd 0100 	strd	r0, r1, [sp]
 8006c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c6a:	462e      	mov	r6, r5
 8006c6c:	4652      	mov	r2, sl
 8006c6e:	462c      	mov	r4, r5
 8006c70:	4630      	mov	r0, r6
 8006c72:	461d      	mov	r5, r3
 8006c74:	4639      	mov	r1, r7
 8006c76:	465b      	mov	r3, fp
 8006c78:	f7f9 faaa 	bl	80001d0 <__aeabi_dsub>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4640      	mov	r0, r8
 8006c82:	4649      	mov	r1, r9
 8006c84:	f7f9 faa4 	bl	80001d0 <__aeabi_dsub>
 8006c88:	4632      	mov	r2, r6
 8006c8a:	462b      	mov	r3, r5
 8006c8c:	f7f9 fc58 	bl	8000540 <__aeabi_dmul>
 8006c90:	4632      	mov	r2, r6
 8006c92:	4680      	mov	r8, r0
 8006c94:	4689      	mov	r9, r1
 8006c96:	462b      	mov	r3, r5
 8006c98:	4630      	mov	r0, r6
 8006c9a:	4639      	mov	r1, r7
 8006c9c:	f7f9 fc50 	bl	8000540 <__aeabi_dmul>
 8006ca0:	4bb4      	ldr	r3, [pc, #720]	; (8006f74 <__kernel_tan+0x394>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f7f9 fa96 	bl	80001d4 <__adddf3>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4640      	mov	r0, r8
 8006cae:	4649      	mov	r1, r9
 8006cb0:	f7f9 fa90 	bl	80001d4 <__adddf3>
 8006cb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cb8:	f7f9 fc42 	bl	8000540 <__aeabi_dmul>
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	462b      	mov	r3, r5
 8006cc0:	f7f9 fa88 	bl	80001d4 <__adddf3>
 8006cc4:	e7b5      	b.n	8006c32 <__kernel_tan+0x52>
 8006cc6:	4bad      	ldr	r3, [pc, #692]	; (8006f7c <__kernel_tan+0x39c>)
 8006cc8:	429f      	cmp	r7, r3
 8006cca:	dd26      	ble.n	8006d1a <__kernel_tan+0x13a>
 8006ccc:	9b00      	ldr	r3, [sp, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	da09      	bge.n	8006ce6 <__kernel_tan+0x106>
 8006cd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006cd6:	469b      	mov	fp, r3
 8006cd8:	ee10 aa10 	vmov	sl, s0
 8006cdc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ce0:	ee11 8a10 	vmov	r8, s2
 8006ce4:	4699      	mov	r9, r3
 8006ce6:	4652      	mov	r2, sl
 8006ce8:	465b      	mov	r3, fp
 8006cea:	a183      	add	r1, pc, #524	; (adr r1, 8006ef8 <__kernel_tan+0x318>)
 8006cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cf0:	f7f9 fa6e 	bl	80001d0 <__aeabi_dsub>
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	460d      	mov	r5, r1
 8006cfc:	a180      	add	r1, pc, #512	; (adr r1, 8006f00 <__kernel_tan+0x320>)
 8006cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d02:	f7f9 fa65 	bl	80001d0 <__aeabi_dsub>
 8006d06:	4622      	mov	r2, r4
 8006d08:	462b      	mov	r3, r5
 8006d0a:	f7f9 fa63 	bl	80001d4 <__adddf3>
 8006d0e:	f04f 0800 	mov.w	r8, #0
 8006d12:	4682      	mov	sl, r0
 8006d14:	468b      	mov	fp, r1
 8006d16:	f04f 0900 	mov.w	r9, #0
 8006d1a:	4652      	mov	r2, sl
 8006d1c:	465b      	mov	r3, fp
 8006d1e:	4650      	mov	r0, sl
 8006d20:	4659      	mov	r1, fp
 8006d22:	f7f9 fc0d 	bl	8000540 <__aeabi_dmul>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	ec43 2b18 	vmov	d8, r2, r3
 8006d2e:	f7f9 fc07 	bl	8000540 <__aeabi_dmul>
 8006d32:	ec53 2b18 	vmov	r2, r3, d8
 8006d36:	4604      	mov	r4, r0
 8006d38:	460d      	mov	r5, r1
 8006d3a:	4650      	mov	r0, sl
 8006d3c:	4659      	mov	r1, fp
 8006d3e:	f7f9 fbff 	bl	8000540 <__aeabi_dmul>
 8006d42:	a371      	add	r3, pc, #452	; (adr r3, 8006f08 <__kernel_tan+0x328>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	ec41 0b19 	vmov	d9, r0, r1
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	4629      	mov	r1, r5
 8006d50:	f7f9 fbf6 	bl	8000540 <__aeabi_dmul>
 8006d54:	a36e      	add	r3, pc, #440	; (adr r3, 8006f10 <__kernel_tan+0x330>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f7f9 fa3b 	bl	80001d4 <__adddf3>
 8006d5e:	4622      	mov	r2, r4
 8006d60:	462b      	mov	r3, r5
 8006d62:	f7f9 fbed 	bl	8000540 <__aeabi_dmul>
 8006d66:	a36c      	add	r3, pc, #432	; (adr r3, 8006f18 <__kernel_tan+0x338>)
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	f7f9 fa32 	bl	80001d4 <__adddf3>
 8006d70:	4622      	mov	r2, r4
 8006d72:	462b      	mov	r3, r5
 8006d74:	f7f9 fbe4 	bl	8000540 <__aeabi_dmul>
 8006d78:	a369      	add	r3, pc, #420	; (adr r3, 8006f20 <__kernel_tan+0x340>)
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	f7f9 fa29 	bl	80001d4 <__adddf3>
 8006d82:	4622      	mov	r2, r4
 8006d84:	462b      	mov	r3, r5
 8006d86:	f7f9 fbdb 	bl	8000540 <__aeabi_dmul>
 8006d8a:	a367      	add	r3, pc, #412	; (adr r3, 8006f28 <__kernel_tan+0x348>)
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	f7f9 fa20 	bl	80001d4 <__adddf3>
 8006d94:	4622      	mov	r2, r4
 8006d96:	462b      	mov	r3, r5
 8006d98:	f7f9 fbd2 	bl	8000540 <__aeabi_dmul>
 8006d9c:	a364      	add	r3, pc, #400	; (adr r3, 8006f30 <__kernel_tan+0x350>)
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	f7f9 fa17 	bl	80001d4 <__adddf3>
 8006da6:	ec53 2b18 	vmov	r2, r3, d8
 8006daa:	f7f9 fbc9 	bl	8000540 <__aeabi_dmul>
 8006dae:	a362      	add	r3, pc, #392	; (adr r3, 8006f38 <__kernel_tan+0x358>)
 8006db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db4:	ec41 0b1a 	vmov	d10, r0, r1
 8006db8:	4620      	mov	r0, r4
 8006dba:	4629      	mov	r1, r5
 8006dbc:	f7f9 fbc0 	bl	8000540 <__aeabi_dmul>
 8006dc0:	a35f      	add	r3, pc, #380	; (adr r3, 8006f40 <__kernel_tan+0x360>)
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	f7f9 fa05 	bl	80001d4 <__adddf3>
 8006dca:	4622      	mov	r2, r4
 8006dcc:	462b      	mov	r3, r5
 8006dce:	f7f9 fbb7 	bl	8000540 <__aeabi_dmul>
 8006dd2:	a35d      	add	r3, pc, #372	; (adr r3, 8006f48 <__kernel_tan+0x368>)
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	f7f9 f9fc 	bl	80001d4 <__adddf3>
 8006ddc:	4622      	mov	r2, r4
 8006dde:	462b      	mov	r3, r5
 8006de0:	f7f9 fbae 	bl	8000540 <__aeabi_dmul>
 8006de4:	a35a      	add	r3, pc, #360	; (adr r3, 8006f50 <__kernel_tan+0x370>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f7f9 f9f3 	bl	80001d4 <__adddf3>
 8006dee:	4622      	mov	r2, r4
 8006df0:	462b      	mov	r3, r5
 8006df2:	f7f9 fba5 	bl	8000540 <__aeabi_dmul>
 8006df6:	a358      	add	r3, pc, #352	; (adr r3, 8006f58 <__kernel_tan+0x378>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f7f9 f9ea 	bl	80001d4 <__adddf3>
 8006e00:	4622      	mov	r2, r4
 8006e02:	462b      	mov	r3, r5
 8006e04:	f7f9 fb9c 	bl	8000540 <__aeabi_dmul>
 8006e08:	a355      	add	r3, pc, #340	; (adr r3, 8006f60 <__kernel_tan+0x380>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 f9e1 	bl	80001d4 <__adddf3>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	ec51 0b1a 	vmov	r0, r1, d10
 8006e1a:	f7f9 f9db 	bl	80001d4 <__adddf3>
 8006e1e:	ec53 2b19 	vmov	r2, r3, d9
 8006e22:	f7f9 fb8d 	bl	8000540 <__aeabi_dmul>
 8006e26:	4642      	mov	r2, r8
 8006e28:	464b      	mov	r3, r9
 8006e2a:	f7f9 f9d3 	bl	80001d4 <__adddf3>
 8006e2e:	ec53 2b18 	vmov	r2, r3, d8
 8006e32:	f7f9 fb85 	bl	8000540 <__aeabi_dmul>
 8006e36:	4642      	mov	r2, r8
 8006e38:	464b      	mov	r3, r9
 8006e3a:	f7f9 f9cb 	bl	80001d4 <__adddf3>
 8006e3e:	a34a      	add	r3, pc, #296	; (adr r3, 8006f68 <__kernel_tan+0x388>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	4604      	mov	r4, r0
 8006e46:	460d      	mov	r5, r1
 8006e48:	ec51 0b19 	vmov	r0, r1, d9
 8006e4c:	f7f9 fb78 	bl	8000540 <__aeabi_dmul>
 8006e50:	4622      	mov	r2, r4
 8006e52:	462b      	mov	r3, r5
 8006e54:	f7f9 f9be 	bl	80001d4 <__adddf3>
 8006e58:	460b      	mov	r3, r1
 8006e5a:	ec41 0b18 	vmov	d8, r0, r1
 8006e5e:	4602      	mov	r2, r0
 8006e60:	4659      	mov	r1, fp
 8006e62:	4650      	mov	r0, sl
 8006e64:	f7f9 f9b6 	bl	80001d4 <__adddf3>
 8006e68:	4b44      	ldr	r3, [pc, #272]	; (8006f7c <__kernel_tan+0x39c>)
 8006e6a:	429f      	cmp	r7, r3
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	460d      	mov	r5, r1
 8006e70:	f340 8086 	ble.w	8006f80 <__kernel_tan+0x3a0>
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7f9 faf9 	bl	800046c <__aeabi_i2d>
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	4680      	mov	r8, r0
 8006e7e:	4689      	mov	r9, r1
 8006e80:	462b      	mov	r3, r5
 8006e82:	4620      	mov	r0, r4
 8006e84:	4629      	mov	r1, r5
 8006e86:	f7f9 fb5b 	bl	8000540 <__aeabi_dmul>
 8006e8a:	4642      	mov	r2, r8
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	460f      	mov	r7, r1
 8006e90:	464b      	mov	r3, r9
 8006e92:	4620      	mov	r0, r4
 8006e94:	4629      	mov	r1, r5
 8006e96:	f7f9 f99d 	bl	80001d4 <__adddf3>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	f7f9 fc77 	bl	8000794 <__aeabi_ddiv>
 8006ea6:	ec53 2b18 	vmov	r2, r3, d8
 8006eaa:	f7f9 f991 	bl	80001d0 <__aeabi_dsub>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4650      	mov	r0, sl
 8006eb4:	4659      	mov	r1, fp
 8006eb6:	f7f9 f98b 	bl	80001d0 <__aeabi_dsub>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	f7f9 f989 	bl	80001d4 <__adddf3>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4640      	mov	r0, r8
 8006ec8:	4649      	mov	r1, r9
 8006eca:	f7f9 f981 	bl	80001d0 <__aeabi_dsub>
 8006ece:	9b00      	ldr	r3, [sp, #0]
 8006ed0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8006ed4:	f00a 0a02 	and.w	sl, sl, #2
 8006ed8:	4604      	mov	r4, r0
 8006eda:	f1ca 0001 	rsb	r0, sl, #1
 8006ede:	460d      	mov	r5, r1
 8006ee0:	f7f9 fac4 	bl	800046c <__aeabi_i2d>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4620      	mov	r0, r4
 8006eea:	4629      	mov	r1, r5
 8006eec:	f7f9 fb28 	bl	8000540 <__aeabi_dmul>
 8006ef0:	e69f      	b.n	8006c32 <__kernel_tan+0x52>
 8006ef2:	bf00      	nop
 8006ef4:	f3af 8000 	nop.w
 8006ef8:	54442d18 	.word	0x54442d18
 8006efc:	3fe921fb 	.word	0x3fe921fb
 8006f00:	33145c07 	.word	0x33145c07
 8006f04:	3c81a626 	.word	0x3c81a626
 8006f08:	74bf7ad4 	.word	0x74bf7ad4
 8006f0c:	3efb2a70 	.word	0x3efb2a70
 8006f10:	32f0a7e9 	.word	0x32f0a7e9
 8006f14:	3f12b80f 	.word	0x3f12b80f
 8006f18:	1a8d1068 	.word	0x1a8d1068
 8006f1c:	3f3026f7 	.word	0x3f3026f7
 8006f20:	fee08315 	.word	0xfee08315
 8006f24:	3f57dbc8 	.word	0x3f57dbc8
 8006f28:	e96e8493 	.word	0xe96e8493
 8006f2c:	3f8226e3 	.word	0x3f8226e3
 8006f30:	1bb341fe 	.word	0x1bb341fe
 8006f34:	3faba1ba 	.word	0x3faba1ba
 8006f38:	db605373 	.word	0xdb605373
 8006f3c:	bef375cb 	.word	0xbef375cb
 8006f40:	a03792a6 	.word	0xa03792a6
 8006f44:	3f147e88 	.word	0x3f147e88
 8006f48:	f2f26501 	.word	0xf2f26501
 8006f4c:	3f4344d8 	.word	0x3f4344d8
 8006f50:	c9560328 	.word	0xc9560328
 8006f54:	3f6d6d22 	.word	0x3f6d6d22
 8006f58:	8406d637 	.word	0x8406d637
 8006f5c:	3f9664f4 	.word	0x3f9664f4
 8006f60:	1110fe7a 	.word	0x1110fe7a
 8006f64:	3fc11111 	.word	0x3fc11111
 8006f68:	55555563 	.word	0x55555563
 8006f6c:	3fd55555 	.word	0x3fd55555
 8006f70:	3e2fffff 	.word	0x3e2fffff
 8006f74:	3ff00000 	.word	0x3ff00000
 8006f78:	bff00000 	.word	0xbff00000
 8006f7c:	3fe59427 	.word	0x3fe59427
 8006f80:	2e01      	cmp	r6, #1
 8006f82:	d02f      	beq.n	8006fe4 <__kernel_tan+0x404>
 8006f84:	460f      	mov	r7, r1
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4689      	mov	r9, r1
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	4917      	ldr	r1, [pc, #92]	; (8006fec <__kernel_tan+0x40c>)
 8006f90:	f7f9 fc00 	bl	8000794 <__aeabi_ddiv>
 8006f94:	2600      	movs	r6, #0
 8006f96:	e9cd 0100 	strd	r0, r1, [sp]
 8006f9a:	4652      	mov	r2, sl
 8006f9c:	465b      	mov	r3, fp
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	f7f9 f915 	bl	80001d0 <__aeabi_dsub>
 8006fa6:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	ec51 0b18 	vmov	r0, r1, d8
 8006fb2:	f7f9 f90d 	bl	80001d0 <__aeabi_dsub>
 8006fb6:	4632      	mov	r2, r6
 8006fb8:	462b      	mov	r3, r5
 8006fba:	f7f9 fac1 	bl	8000540 <__aeabi_dmul>
 8006fbe:	46b0      	mov	r8, r6
 8006fc0:	460f      	mov	r7, r1
 8006fc2:	4642      	mov	r2, r8
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	4634      	mov	r4, r6
 8006fc8:	4649      	mov	r1, r9
 8006fca:	4606      	mov	r6, r0
 8006fcc:	4640      	mov	r0, r8
 8006fce:	f7f9 fab7 	bl	8000540 <__aeabi_dmul>
 8006fd2:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <__kernel_tan+0x410>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f7f9 f8fd 	bl	80001d4 <__adddf3>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4630      	mov	r0, r6
 8006fe0:	4639      	mov	r1, r7
 8006fe2:	e665      	b.n	8006cb0 <__kernel_tan+0xd0>
 8006fe4:	4682      	mov	sl, r0
 8006fe6:	468b      	mov	fp, r1
 8006fe8:	e625      	b.n	8006c36 <__kernel_tan+0x56>
 8006fea:	bf00      	nop
 8006fec:	bff00000 	.word	0xbff00000
 8006ff0:	3ff00000 	.word	0x3ff00000
 8006ff4:	00000000 	.word	0x00000000

08006ff8 <__ieee754_rem_pio2>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	ed2d 8b02 	vpush	{d8}
 8007000:	ec55 4b10 	vmov	r4, r5, d0
 8007004:	4bca      	ldr	r3, [pc, #808]	; (8007330 <__ieee754_rem_pio2+0x338>)
 8007006:	b08b      	sub	sp, #44	; 0x2c
 8007008:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800700c:	4598      	cmp	r8, r3
 800700e:	4682      	mov	sl, r0
 8007010:	9502      	str	r5, [sp, #8]
 8007012:	dc08      	bgt.n	8007026 <__ieee754_rem_pio2+0x2e>
 8007014:	2200      	movs	r2, #0
 8007016:	2300      	movs	r3, #0
 8007018:	ed80 0b00 	vstr	d0, [r0]
 800701c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007020:	f04f 0b00 	mov.w	fp, #0
 8007024:	e028      	b.n	8007078 <__ieee754_rem_pio2+0x80>
 8007026:	4bc3      	ldr	r3, [pc, #780]	; (8007334 <__ieee754_rem_pio2+0x33c>)
 8007028:	4598      	cmp	r8, r3
 800702a:	dc78      	bgt.n	800711e <__ieee754_rem_pio2+0x126>
 800702c:	9b02      	ldr	r3, [sp, #8]
 800702e:	4ec2      	ldr	r6, [pc, #776]	; (8007338 <__ieee754_rem_pio2+0x340>)
 8007030:	2b00      	cmp	r3, #0
 8007032:	ee10 0a10 	vmov	r0, s0
 8007036:	a3b0      	add	r3, pc, #704	; (adr r3, 80072f8 <__ieee754_rem_pio2+0x300>)
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	4629      	mov	r1, r5
 800703e:	dd39      	ble.n	80070b4 <__ieee754_rem_pio2+0xbc>
 8007040:	f7f9 f8c6 	bl	80001d0 <__aeabi_dsub>
 8007044:	45b0      	cmp	r8, r6
 8007046:	4604      	mov	r4, r0
 8007048:	460d      	mov	r5, r1
 800704a:	d01b      	beq.n	8007084 <__ieee754_rem_pio2+0x8c>
 800704c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007300 <__ieee754_rem_pio2+0x308>)
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f7f9 f8bd 	bl	80001d0 <__aeabi_dsub>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	e9ca 2300 	strd	r2, r3, [sl]
 800705e:	4620      	mov	r0, r4
 8007060:	4629      	mov	r1, r5
 8007062:	f7f9 f8b5 	bl	80001d0 <__aeabi_dsub>
 8007066:	a3a6      	add	r3, pc, #664	; (adr r3, 8007300 <__ieee754_rem_pio2+0x308>)
 8007068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706c:	f7f9 f8b0 	bl	80001d0 <__aeabi_dsub>
 8007070:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007074:	f04f 0b01 	mov.w	fp, #1
 8007078:	4658      	mov	r0, fp
 800707a:	b00b      	add	sp, #44	; 0x2c
 800707c:	ecbd 8b02 	vpop	{d8}
 8007080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007084:	a3a0      	add	r3, pc, #640	; (adr r3, 8007308 <__ieee754_rem_pio2+0x310>)
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f7f9 f8a1 	bl	80001d0 <__aeabi_dsub>
 800708e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007310 <__ieee754_rem_pio2+0x318>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	4604      	mov	r4, r0
 8007096:	460d      	mov	r5, r1
 8007098:	f7f9 f89a 	bl	80001d0 <__aeabi_dsub>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	e9ca 2300 	strd	r2, r3, [sl]
 80070a4:	4620      	mov	r0, r4
 80070a6:	4629      	mov	r1, r5
 80070a8:	f7f9 f892 	bl	80001d0 <__aeabi_dsub>
 80070ac:	a398      	add	r3, pc, #608	; (adr r3, 8007310 <__ieee754_rem_pio2+0x318>)
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	e7db      	b.n	800706c <__ieee754_rem_pio2+0x74>
 80070b4:	f7f9 f88e 	bl	80001d4 <__adddf3>
 80070b8:	45b0      	cmp	r8, r6
 80070ba:	4604      	mov	r4, r0
 80070bc:	460d      	mov	r5, r1
 80070be:	d016      	beq.n	80070ee <__ieee754_rem_pio2+0xf6>
 80070c0:	a38f      	add	r3, pc, #572	; (adr r3, 8007300 <__ieee754_rem_pio2+0x308>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 f885 	bl	80001d4 <__adddf3>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	e9ca 2300 	strd	r2, r3, [sl]
 80070d2:	4620      	mov	r0, r4
 80070d4:	4629      	mov	r1, r5
 80070d6:	f7f9 f87b 	bl	80001d0 <__aeabi_dsub>
 80070da:	a389      	add	r3, pc, #548	; (adr r3, 8007300 <__ieee754_rem_pio2+0x308>)
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f7f9 f878 	bl	80001d4 <__adddf3>
 80070e4:	f04f 3bff 	mov.w	fp, #4294967295
 80070e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80070ec:	e7c4      	b.n	8007078 <__ieee754_rem_pio2+0x80>
 80070ee:	a386      	add	r3, pc, #536	; (adr r3, 8007308 <__ieee754_rem_pio2+0x310>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 f86e 	bl	80001d4 <__adddf3>
 80070f8:	a385      	add	r3, pc, #532	; (adr r3, 8007310 <__ieee754_rem_pio2+0x318>)
 80070fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fe:	4604      	mov	r4, r0
 8007100:	460d      	mov	r5, r1
 8007102:	f7f9 f867 	bl	80001d4 <__adddf3>
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	e9ca 2300 	strd	r2, r3, [sl]
 800710e:	4620      	mov	r0, r4
 8007110:	4629      	mov	r1, r5
 8007112:	f7f9 f85d 	bl	80001d0 <__aeabi_dsub>
 8007116:	a37e      	add	r3, pc, #504	; (adr r3, 8007310 <__ieee754_rem_pio2+0x318>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	e7e0      	b.n	80070e0 <__ieee754_rem_pio2+0xe8>
 800711e:	4b87      	ldr	r3, [pc, #540]	; (800733c <__ieee754_rem_pio2+0x344>)
 8007120:	4598      	cmp	r8, r3
 8007122:	f300 80d8 	bgt.w	80072d6 <__ieee754_rem_pio2+0x2de>
 8007126:	f000 f96d 	bl	8007404 <fabs>
 800712a:	ec55 4b10 	vmov	r4, r5, d0
 800712e:	ee10 0a10 	vmov	r0, s0
 8007132:	a379      	add	r3, pc, #484	; (adr r3, 8007318 <__ieee754_rem_pio2+0x320>)
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	4629      	mov	r1, r5
 800713a:	f7f9 fa01 	bl	8000540 <__aeabi_dmul>
 800713e:	4b80      	ldr	r3, [pc, #512]	; (8007340 <__ieee754_rem_pio2+0x348>)
 8007140:	2200      	movs	r2, #0
 8007142:	f7f9 f847 	bl	80001d4 <__adddf3>
 8007146:	f7f9 fc95 	bl	8000a74 <__aeabi_d2iz>
 800714a:	4683      	mov	fp, r0
 800714c:	f7f9 f98e 	bl	800046c <__aeabi_i2d>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	ec43 2b18 	vmov	d8, r2, r3
 8007158:	a367      	add	r3, pc, #412	; (adr r3, 80072f8 <__ieee754_rem_pio2+0x300>)
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	f7f9 f9ef 	bl	8000540 <__aeabi_dmul>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4620      	mov	r0, r4
 8007168:	4629      	mov	r1, r5
 800716a:	f7f9 f831 	bl	80001d0 <__aeabi_dsub>
 800716e:	a364      	add	r3, pc, #400	; (adr r3, 8007300 <__ieee754_rem_pio2+0x308>)
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	4606      	mov	r6, r0
 8007176:	460f      	mov	r7, r1
 8007178:	ec51 0b18 	vmov	r0, r1, d8
 800717c:	f7f9 f9e0 	bl	8000540 <__aeabi_dmul>
 8007180:	f1bb 0f1f 	cmp.w	fp, #31
 8007184:	4604      	mov	r4, r0
 8007186:	460d      	mov	r5, r1
 8007188:	dc0d      	bgt.n	80071a6 <__ieee754_rem_pio2+0x1ae>
 800718a:	4b6e      	ldr	r3, [pc, #440]	; (8007344 <__ieee754_rem_pio2+0x34c>)
 800718c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007194:	4543      	cmp	r3, r8
 8007196:	d006      	beq.n	80071a6 <__ieee754_rem_pio2+0x1ae>
 8007198:	4622      	mov	r2, r4
 800719a:	462b      	mov	r3, r5
 800719c:	4630      	mov	r0, r6
 800719e:	4639      	mov	r1, r7
 80071a0:	f7f9 f816 	bl	80001d0 <__aeabi_dsub>
 80071a4:	e00e      	b.n	80071c4 <__ieee754_rem_pio2+0x1cc>
 80071a6:	462b      	mov	r3, r5
 80071a8:	4622      	mov	r2, r4
 80071aa:	4630      	mov	r0, r6
 80071ac:	4639      	mov	r1, r7
 80071ae:	f7f9 f80f 	bl	80001d0 <__aeabi_dsub>
 80071b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80071b6:	9303      	str	r3, [sp, #12]
 80071b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80071bc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	dc02      	bgt.n	80071ca <__ieee754_rem_pio2+0x1d2>
 80071c4:	e9ca 0100 	strd	r0, r1, [sl]
 80071c8:	e039      	b.n	800723e <__ieee754_rem_pio2+0x246>
 80071ca:	a34f      	add	r3, pc, #316	; (adr r3, 8007308 <__ieee754_rem_pio2+0x310>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	ec51 0b18 	vmov	r0, r1, d8
 80071d4:	f7f9 f9b4 	bl	8000540 <__aeabi_dmul>
 80071d8:	4604      	mov	r4, r0
 80071da:	460d      	mov	r5, r1
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4630      	mov	r0, r6
 80071e2:	4639      	mov	r1, r7
 80071e4:	f7f8 fff4 	bl	80001d0 <__aeabi_dsub>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4680      	mov	r8, r0
 80071ee:	4689      	mov	r9, r1
 80071f0:	4630      	mov	r0, r6
 80071f2:	4639      	mov	r1, r7
 80071f4:	f7f8 ffec 	bl	80001d0 <__aeabi_dsub>
 80071f8:	4622      	mov	r2, r4
 80071fa:	462b      	mov	r3, r5
 80071fc:	f7f8 ffe8 	bl	80001d0 <__aeabi_dsub>
 8007200:	a343      	add	r3, pc, #268	; (adr r3, 8007310 <__ieee754_rem_pio2+0x318>)
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	4604      	mov	r4, r0
 8007208:	460d      	mov	r5, r1
 800720a:	ec51 0b18 	vmov	r0, r1, d8
 800720e:	f7f9 f997 	bl	8000540 <__aeabi_dmul>
 8007212:	4622      	mov	r2, r4
 8007214:	462b      	mov	r3, r5
 8007216:	f7f8 ffdb 	bl	80001d0 <__aeabi_dsub>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4604      	mov	r4, r0
 8007220:	460d      	mov	r5, r1
 8007222:	4640      	mov	r0, r8
 8007224:	4649      	mov	r1, r9
 8007226:	f7f8 ffd3 	bl	80001d0 <__aeabi_dsub>
 800722a:	9a03      	ldr	r2, [sp, #12]
 800722c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b31      	cmp	r3, #49	; 0x31
 8007234:	dc24      	bgt.n	8007280 <__ieee754_rem_pio2+0x288>
 8007236:	e9ca 0100 	strd	r0, r1, [sl]
 800723a:	4646      	mov	r6, r8
 800723c:	464f      	mov	r7, r9
 800723e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007242:	4630      	mov	r0, r6
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	4639      	mov	r1, r7
 800724a:	f7f8 ffc1 	bl	80001d0 <__aeabi_dsub>
 800724e:	462b      	mov	r3, r5
 8007250:	4622      	mov	r2, r4
 8007252:	f7f8 ffbd 	bl	80001d0 <__aeabi_dsub>
 8007256:	9b02      	ldr	r3, [sp, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800725e:	f6bf af0b 	bge.w	8007078 <__ieee754_rem_pio2+0x80>
 8007262:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007266:	f8ca 3004 	str.w	r3, [sl, #4]
 800726a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800726e:	f8ca 8000 	str.w	r8, [sl]
 8007272:	f8ca 0008 	str.w	r0, [sl, #8]
 8007276:	f8ca 300c 	str.w	r3, [sl, #12]
 800727a:	f1cb 0b00 	rsb	fp, fp, #0
 800727e:	e6fb      	b.n	8007078 <__ieee754_rem_pio2+0x80>
 8007280:	a327      	add	r3, pc, #156	; (adr r3, 8007320 <__ieee754_rem_pio2+0x328>)
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	ec51 0b18 	vmov	r0, r1, d8
 800728a:	f7f9 f959 	bl	8000540 <__aeabi_dmul>
 800728e:	4604      	mov	r4, r0
 8007290:	460d      	mov	r5, r1
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4640      	mov	r0, r8
 8007298:	4649      	mov	r1, r9
 800729a:	f7f8 ff99 	bl	80001d0 <__aeabi_dsub>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4606      	mov	r6, r0
 80072a4:	460f      	mov	r7, r1
 80072a6:	4640      	mov	r0, r8
 80072a8:	4649      	mov	r1, r9
 80072aa:	f7f8 ff91 	bl	80001d0 <__aeabi_dsub>
 80072ae:	4622      	mov	r2, r4
 80072b0:	462b      	mov	r3, r5
 80072b2:	f7f8 ff8d 	bl	80001d0 <__aeabi_dsub>
 80072b6:	a31c      	add	r3, pc, #112	; (adr r3, 8007328 <__ieee754_rem_pio2+0x330>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	4604      	mov	r4, r0
 80072be:	460d      	mov	r5, r1
 80072c0:	ec51 0b18 	vmov	r0, r1, d8
 80072c4:	f7f9 f93c 	bl	8000540 <__aeabi_dmul>
 80072c8:	4622      	mov	r2, r4
 80072ca:	462b      	mov	r3, r5
 80072cc:	f7f8 ff80 	bl	80001d0 <__aeabi_dsub>
 80072d0:	4604      	mov	r4, r0
 80072d2:	460d      	mov	r5, r1
 80072d4:	e760      	b.n	8007198 <__ieee754_rem_pio2+0x1a0>
 80072d6:	4b1c      	ldr	r3, [pc, #112]	; (8007348 <__ieee754_rem_pio2+0x350>)
 80072d8:	4598      	cmp	r8, r3
 80072da:	dd37      	ble.n	800734c <__ieee754_rem_pio2+0x354>
 80072dc:	ee10 2a10 	vmov	r2, s0
 80072e0:	462b      	mov	r3, r5
 80072e2:	4620      	mov	r0, r4
 80072e4:	4629      	mov	r1, r5
 80072e6:	f7f8 ff73 	bl	80001d0 <__aeabi_dsub>
 80072ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80072ee:	e9ca 0100 	strd	r0, r1, [sl]
 80072f2:	e695      	b.n	8007020 <__ieee754_rem_pio2+0x28>
 80072f4:	f3af 8000 	nop.w
 80072f8:	54400000 	.word	0x54400000
 80072fc:	3ff921fb 	.word	0x3ff921fb
 8007300:	1a626331 	.word	0x1a626331
 8007304:	3dd0b461 	.word	0x3dd0b461
 8007308:	1a600000 	.word	0x1a600000
 800730c:	3dd0b461 	.word	0x3dd0b461
 8007310:	2e037073 	.word	0x2e037073
 8007314:	3ba3198a 	.word	0x3ba3198a
 8007318:	6dc9c883 	.word	0x6dc9c883
 800731c:	3fe45f30 	.word	0x3fe45f30
 8007320:	2e000000 	.word	0x2e000000
 8007324:	3ba3198a 	.word	0x3ba3198a
 8007328:	252049c1 	.word	0x252049c1
 800732c:	397b839a 	.word	0x397b839a
 8007330:	3fe921fb 	.word	0x3fe921fb
 8007334:	4002d97b 	.word	0x4002d97b
 8007338:	3ff921fb 	.word	0x3ff921fb
 800733c:	413921fb 	.word	0x413921fb
 8007340:	3fe00000 	.word	0x3fe00000
 8007344:	08007db8 	.word	0x08007db8
 8007348:	7fefffff 	.word	0x7fefffff
 800734c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007350:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8007354:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007358:	4620      	mov	r0, r4
 800735a:	460d      	mov	r5, r1
 800735c:	f7f9 fb8a 	bl	8000a74 <__aeabi_d2iz>
 8007360:	f7f9 f884 	bl	800046c <__aeabi_i2d>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4620      	mov	r0, r4
 800736a:	4629      	mov	r1, r5
 800736c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007370:	f7f8 ff2e 	bl	80001d0 <__aeabi_dsub>
 8007374:	4b21      	ldr	r3, [pc, #132]	; (80073fc <__ieee754_rem_pio2+0x404>)
 8007376:	2200      	movs	r2, #0
 8007378:	f7f9 f8e2 	bl	8000540 <__aeabi_dmul>
 800737c:	460d      	mov	r5, r1
 800737e:	4604      	mov	r4, r0
 8007380:	f7f9 fb78 	bl	8000a74 <__aeabi_d2iz>
 8007384:	f7f9 f872 	bl	800046c <__aeabi_i2d>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4620      	mov	r0, r4
 800738e:	4629      	mov	r1, r5
 8007390:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007394:	f7f8 ff1c 	bl	80001d0 <__aeabi_dsub>
 8007398:	4b18      	ldr	r3, [pc, #96]	; (80073fc <__ieee754_rem_pio2+0x404>)
 800739a:	2200      	movs	r2, #0
 800739c:	f7f9 f8d0 	bl	8000540 <__aeabi_dmul>
 80073a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80073a4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80073a8:	2703      	movs	r7, #3
 80073aa:	2400      	movs	r4, #0
 80073ac:	2500      	movs	r5, #0
 80073ae:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80073b2:	4622      	mov	r2, r4
 80073b4:	462b      	mov	r3, r5
 80073b6:	46b9      	mov	r9, r7
 80073b8:	3f01      	subs	r7, #1
 80073ba:	f7f9 fb29 	bl	8000a10 <__aeabi_dcmpeq>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d1f5      	bne.n	80073ae <__ieee754_rem_pio2+0x3b6>
 80073c2:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <__ieee754_rem_pio2+0x408>)
 80073c4:	9301      	str	r3, [sp, #4]
 80073c6:	2302      	movs	r3, #2
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	4632      	mov	r2, r6
 80073cc:	464b      	mov	r3, r9
 80073ce:	4651      	mov	r1, sl
 80073d0:	a804      	add	r0, sp, #16
 80073d2:	f000 f821 	bl	8007418 <__kernel_rem_pio2>
 80073d6:	9b02      	ldr	r3, [sp, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	4683      	mov	fp, r0
 80073dc:	f6bf ae4c 	bge.w	8007078 <__ieee754_rem_pio2+0x80>
 80073e0:	e9da 2100 	ldrd	r2, r1, [sl]
 80073e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073e8:	e9ca 2300 	strd	r2, r3, [sl]
 80073ec:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80073f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073f4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80073f8:	e73f      	b.n	800727a <__ieee754_rem_pio2+0x282>
 80073fa:	bf00      	nop
 80073fc:	41700000 	.word	0x41700000
 8007400:	08007e38 	.word	0x08007e38

08007404 <fabs>:
 8007404:	ec51 0b10 	vmov	r0, r1, d0
 8007408:	ee10 2a10 	vmov	r2, s0
 800740c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007410:	ec43 2b10 	vmov	d0, r2, r3
 8007414:	4770      	bx	lr
	...

08007418 <__kernel_rem_pio2>:
 8007418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	ed2d 8b02 	vpush	{d8}
 8007420:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007424:	f112 0f14 	cmn.w	r2, #20
 8007428:	9306      	str	r3, [sp, #24]
 800742a:	9104      	str	r1, [sp, #16]
 800742c:	4bc2      	ldr	r3, [pc, #776]	; (8007738 <__kernel_rem_pio2+0x320>)
 800742e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007430:	9009      	str	r0, [sp, #36]	; 0x24
 8007432:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	9b06      	ldr	r3, [sp, #24]
 800743a:	f103 33ff 	add.w	r3, r3, #4294967295
 800743e:	bfa8      	it	ge
 8007440:	1ed4      	subge	r4, r2, #3
 8007442:	9305      	str	r3, [sp, #20]
 8007444:	bfb2      	itee	lt
 8007446:	2400      	movlt	r4, #0
 8007448:	2318      	movge	r3, #24
 800744a:	fb94 f4f3 	sdivge	r4, r4, r3
 800744e:	f06f 0317 	mvn.w	r3, #23
 8007452:	fb04 3303 	mla	r3, r4, r3, r3
 8007456:	eb03 0a02 	add.w	sl, r3, r2
 800745a:	9b00      	ldr	r3, [sp, #0]
 800745c:	9a05      	ldr	r2, [sp, #20]
 800745e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007728 <__kernel_rem_pio2+0x310>
 8007462:	eb03 0802 	add.w	r8, r3, r2
 8007466:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007468:	1aa7      	subs	r7, r4, r2
 800746a:	ae20      	add	r6, sp, #128	; 0x80
 800746c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007470:	2500      	movs	r5, #0
 8007472:	4545      	cmp	r5, r8
 8007474:	dd13      	ble.n	800749e <__kernel_rem_pio2+0x86>
 8007476:	9b06      	ldr	r3, [sp, #24]
 8007478:	aa20      	add	r2, sp, #128	; 0x80
 800747a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800747e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007482:	f04f 0800 	mov.w	r8, #0
 8007486:	9b00      	ldr	r3, [sp, #0]
 8007488:	4598      	cmp	r8, r3
 800748a:	dc31      	bgt.n	80074f0 <__kernel_rem_pio2+0xd8>
 800748c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007728 <__kernel_rem_pio2+0x310>
 8007490:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007494:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007498:	462f      	mov	r7, r5
 800749a:	2600      	movs	r6, #0
 800749c:	e01b      	b.n	80074d6 <__kernel_rem_pio2+0xbe>
 800749e:	42ef      	cmn	r7, r5
 80074a0:	d407      	bmi.n	80074b2 <__kernel_rem_pio2+0x9a>
 80074a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80074a6:	f7f8 ffe1 	bl	800046c <__aeabi_i2d>
 80074aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80074ae:	3501      	adds	r5, #1
 80074b0:	e7df      	b.n	8007472 <__kernel_rem_pio2+0x5a>
 80074b2:	ec51 0b18 	vmov	r0, r1, d8
 80074b6:	e7f8      	b.n	80074aa <__kernel_rem_pio2+0x92>
 80074b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80074c0:	f7f9 f83e 	bl	8000540 <__aeabi_dmul>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074cc:	f7f8 fe82 	bl	80001d4 <__adddf3>
 80074d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074d4:	3601      	adds	r6, #1
 80074d6:	9b05      	ldr	r3, [sp, #20]
 80074d8:	429e      	cmp	r6, r3
 80074da:	f1a7 0708 	sub.w	r7, r7, #8
 80074de:	ddeb      	ble.n	80074b8 <__kernel_rem_pio2+0xa0>
 80074e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074e4:	f108 0801 	add.w	r8, r8, #1
 80074e8:	ecab 7b02 	vstmia	fp!, {d7}
 80074ec:	3508      	adds	r5, #8
 80074ee:	e7ca      	b.n	8007486 <__kernel_rem_pio2+0x6e>
 80074f0:	9b00      	ldr	r3, [sp, #0]
 80074f2:	aa0c      	add	r2, sp, #48	; 0x30
 80074f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80074f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074fa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80074fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007500:	9c00      	ldr	r4, [sp, #0]
 8007502:	930a      	str	r3, [sp, #40]	; 0x28
 8007504:	00e3      	lsls	r3, r4, #3
 8007506:	9308      	str	r3, [sp, #32]
 8007508:	ab98      	add	r3, sp, #608	; 0x260
 800750a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800750e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007512:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8007516:	ab70      	add	r3, sp, #448	; 0x1c0
 8007518:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800751c:	46c3      	mov	fp, r8
 800751e:	46a1      	mov	r9, r4
 8007520:	f1b9 0f00 	cmp.w	r9, #0
 8007524:	f1a5 0508 	sub.w	r5, r5, #8
 8007528:	dc77      	bgt.n	800761a <__kernel_rem_pio2+0x202>
 800752a:	ec47 6b10 	vmov	d0, r6, r7
 800752e:	4650      	mov	r0, sl
 8007530:	f000 fac2 	bl	8007ab8 <scalbn>
 8007534:	ec57 6b10 	vmov	r6, r7, d0
 8007538:	2200      	movs	r2, #0
 800753a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800753e:	ee10 0a10 	vmov	r0, s0
 8007542:	4639      	mov	r1, r7
 8007544:	f7f8 fffc 	bl	8000540 <__aeabi_dmul>
 8007548:	ec41 0b10 	vmov	d0, r0, r1
 800754c:	f000 fb34 	bl	8007bb8 <floor>
 8007550:	4b7a      	ldr	r3, [pc, #488]	; (800773c <__kernel_rem_pio2+0x324>)
 8007552:	ec51 0b10 	vmov	r0, r1, d0
 8007556:	2200      	movs	r2, #0
 8007558:	f7f8 fff2 	bl	8000540 <__aeabi_dmul>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4630      	mov	r0, r6
 8007562:	4639      	mov	r1, r7
 8007564:	f7f8 fe34 	bl	80001d0 <__aeabi_dsub>
 8007568:	460f      	mov	r7, r1
 800756a:	4606      	mov	r6, r0
 800756c:	f7f9 fa82 	bl	8000a74 <__aeabi_d2iz>
 8007570:	9002      	str	r0, [sp, #8]
 8007572:	f7f8 ff7b 	bl	800046c <__aeabi_i2d>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4630      	mov	r0, r6
 800757c:	4639      	mov	r1, r7
 800757e:	f7f8 fe27 	bl	80001d0 <__aeabi_dsub>
 8007582:	f1ba 0f00 	cmp.w	sl, #0
 8007586:	4606      	mov	r6, r0
 8007588:	460f      	mov	r7, r1
 800758a:	dd6d      	ble.n	8007668 <__kernel_rem_pio2+0x250>
 800758c:	1e61      	subs	r1, r4, #1
 800758e:	ab0c      	add	r3, sp, #48	; 0x30
 8007590:	9d02      	ldr	r5, [sp, #8]
 8007592:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007596:	f1ca 0018 	rsb	r0, sl, #24
 800759a:	fa43 f200 	asr.w	r2, r3, r0
 800759e:	4415      	add	r5, r2
 80075a0:	4082      	lsls	r2, r0
 80075a2:	1a9b      	subs	r3, r3, r2
 80075a4:	aa0c      	add	r2, sp, #48	; 0x30
 80075a6:	9502      	str	r5, [sp, #8]
 80075a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80075ac:	f1ca 0217 	rsb	r2, sl, #23
 80075b0:	fa43 fb02 	asr.w	fp, r3, r2
 80075b4:	f1bb 0f00 	cmp.w	fp, #0
 80075b8:	dd65      	ble.n	8007686 <__kernel_rem_pio2+0x26e>
 80075ba:	9b02      	ldr	r3, [sp, #8]
 80075bc:	2200      	movs	r2, #0
 80075be:	3301      	adds	r3, #1
 80075c0:	9302      	str	r3, [sp, #8]
 80075c2:	4615      	mov	r5, r2
 80075c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80075c8:	4294      	cmp	r4, r2
 80075ca:	f300 809f 	bgt.w	800770c <__kernel_rem_pio2+0x2f4>
 80075ce:	f1ba 0f00 	cmp.w	sl, #0
 80075d2:	dd07      	ble.n	80075e4 <__kernel_rem_pio2+0x1cc>
 80075d4:	f1ba 0f01 	cmp.w	sl, #1
 80075d8:	f000 80c1 	beq.w	800775e <__kernel_rem_pio2+0x346>
 80075dc:	f1ba 0f02 	cmp.w	sl, #2
 80075e0:	f000 80c7 	beq.w	8007772 <__kernel_rem_pio2+0x35a>
 80075e4:	f1bb 0f02 	cmp.w	fp, #2
 80075e8:	d14d      	bne.n	8007686 <__kernel_rem_pio2+0x26e>
 80075ea:	4632      	mov	r2, r6
 80075ec:	463b      	mov	r3, r7
 80075ee:	4954      	ldr	r1, [pc, #336]	; (8007740 <__kernel_rem_pio2+0x328>)
 80075f0:	2000      	movs	r0, #0
 80075f2:	f7f8 fded 	bl	80001d0 <__aeabi_dsub>
 80075f6:	4606      	mov	r6, r0
 80075f8:	460f      	mov	r7, r1
 80075fa:	2d00      	cmp	r5, #0
 80075fc:	d043      	beq.n	8007686 <__kernel_rem_pio2+0x26e>
 80075fe:	4650      	mov	r0, sl
 8007600:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007730 <__kernel_rem_pio2+0x318>
 8007604:	f000 fa58 	bl	8007ab8 <scalbn>
 8007608:	4630      	mov	r0, r6
 800760a:	4639      	mov	r1, r7
 800760c:	ec53 2b10 	vmov	r2, r3, d0
 8007610:	f7f8 fdde 	bl	80001d0 <__aeabi_dsub>
 8007614:	4606      	mov	r6, r0
 8007616:	460f      	mov	r7, r1
 8007618:	e035      	b.n	8007686 <__kernel_rem_pio2+0x26e>
 800761a:	4b4a      	ldr	r3, [pc, #296]	; (8007744 <__kernel_rem_pio2+0x32c>)
 800761c:	2200      	movs	r2, #0
 800761e:	4630      	mov	r0, r6
 8007620:	4639      	mov	r1, r7
 8007622:	f7f8 ff8d 	bl	8000540 <__aeabi_dmul>
 8007626:	f7f9 fa25 	bl	8000a74 <__aeabi_d2iz>
 800762a:	f7f8 ff1f 	bl	800046c <__aeabi_i2d>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	ec43 2b18 	vmov	d8, r2, r3
 8007636:	4b44      	ldr	r3, [pc, #272]	; (8007748 <__kernel_rem_pio2+0x330>)
 8007638:	2200      	movs	r2, #0
 800763a:	f7f8 ff81 	bl	8000540 <__aeabi_dmul>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4630      	mov	r0, r6
 8007644:	4639      	mov	r1, r7
 8007646:	f7f8 fdc3 	bl	80001d0 <__aeabi_dsub>
 800764a:	f7f9 fa13 	bl	8000a74 <__aeabi_d2iz>
 800764e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007652:	f84b 0b04 	str.w	r0, [fp], #4
 8007656:	ec51 0b18 	vmov	r0, r1, d8
 800765a:	f7f8 fdbb 	bl	80001d4 <__adddf3>
 800765e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007662:	4606      	mov	r6, r0
 8007664:	460f      	mov	r7, r1
 8007666:	e75b      	b.n	8007520 <__kernel_rem_pio2+0x108>
 8007668:	d106      	bne.n	8007678 <__kernel_rem_pio2+0x260>
 800766a:	1e63      	subs	r3, r4, #1
 800766c:	aa0c      	add	r2, sp, #48	; 0x30
 800766e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007672:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8007676:	e79d      	b.n	80075b4 <__kernel_rem_pio2+0x19c>
 8007678:	4b34      	ldr	r3, [pc, #208]	; (800774c <__kernel_rem_pio2+0x334>)
 800767a:	2200      	movs	r2, #0
 800767c:	f7f9 f9e6 	bl	8000a4c <__aeabi_dcmpge>
 8007680:	2800      	cmp	r0, #0
 8007682:	d140      	bne.n	8007706 <__kernel_rem_pio2+0x2ee>
 8007684:	4683      	mov	fp, r0
 8007686:	2200      	movs	r2, #0
 8007688:	2300      	movs	r3, #0
 800768a:	4630      	mov	r0, r6
 800768c:	4639      	mov	r1, r7
 800768e:	f7f9 f9bf 	bl	8000a10 <__aeabi_dcmpeq>
 8007692:	2800      	cmp	r0, #0
 8007694:	f000 80c1 	beq.w	800781a <__kernel_rem_pio2+0x402>
 8007698:	1e65      	subs	r5, r4, #1
 800769a:	462b      	mov	r3, r5
 800769c:	2200      	movs	r2, #0
 800769e:	9900      	ldr	r1, [sp, #0]
 80076a0:	428b      	cmp	r3, r1
 80076a2:	da6d      	bge.n	8007780 <__kernel_rem_pio2+0x368>
 80076a4:	2a00      	cmp	r2, #0
 80076a6:	f000 808a 	beq.w	80077be <__kernel_rem_pio2+0x3a6>
 80076aa:	ab0c      	add	r3, sp, #48	; 0x30
 80076ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80076b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 80ae 	beq.w	8007816 <__kernel_rem_pio2+0x3fe>
 80076ba:	4650      	mov	r0, sl
 80076bc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007730 <__kernel_rem_pio2+0x318>
 80076c0:	f000 f9fa 	bl	8007ab8 <scalbn>
 80076c4:	1c6b      	adds	r3, r5, #1
 80076c6:	00da      	lsls	r2, r3, #3
 80076c8:	9205      	str	r2, [sp, #20]
 80076ca:	ec57 6b10 	vmov	r6, r7, d0
 80076ce:	aa70      	add	r2, sp, #448	; 0x1c0
 80076d0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007744 <__kernel_rem_pio2+0x32c>
 80076d4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80076d8:	462c      	mov	r4, r5
 80076da:	f04f 0800 	mov.w	r8, #0
 80076de:	2c00      	cmp	r4, #0
 80076e0:	f280 80d4 	bge.w	800788c <__kernel_rem_pio2+0x474>
 80076e4:	462c      	mov	r4, r5
 80076e6:	2c00      	cmp	r4, #0
 80076e8:	f2c0 8102 	blt.w	80078f0 <__kernel_rem_pio2+0x4d8>
 80076ec:	4b18      	ldr	r3, [pc, #96]	; (8007750 <__kernel_rem_pio2+0x338>)
 80076ee:	461e      	mov	r6, r3
 80076f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80076f2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80076f6:	1b2b      	subs	r3, r5, r4
 80076f8:	f04f 0900 	mov.w	r9, #0
 80076fc:	f04f 0a00 	mov.w	sl, #0
 8007700:	2700      	movs	r7, #0
 8007702:	9306      	str	r3, [sp, #24]
 8007704:	e0e6      	b.n	80078d4 <__kernel_rem_pio2+0x4bc>
 8007706:	f04f 0b02 	mov.w	fp, #2
 800770a:	e756      	b.n	80075ba <__kernel_rem_pio2+0x1a2>
 800770c:	f8d8 3000 	ldr.w	r3, [r8]
 8007710:	bb05      	cbnz	r5, 8007754 <__kernel_rem_pio2+0x33c>
 8007712:	b123      	cbz	r3, 800771e <__kernel_rem_pio2+0x306>
 8007714:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007718:	f8c8 3000 	str.w	r3, [r8]
 800771c:	2301      	movs	r3, #1
 800771e:	3201      	adds	r2, #1
 8007720:	f108 0804 	add.w	r8, r8, #4
 8007724:	461d      	mov	r5, r3
 8007726:	e74f      	b.n	80075c8 <__kernel_rem_pio2+0x1b0>
	...
 8007734:	3ff00000 	.word	0x3ff00000
 8007738:	08007f80 	.word	0x08007f80
 800773c:	40200000 	.word	0x40200000
 8007740:	3ff00000 	.word	0x3ff00000
 8007744:	3e700000 	.word	0x3e700000
 8007748:	41700000 	.word	0x41700000
 800774c:	3fe00000 	.word	0x3fe00000
 8007750:	08007f40 	.word	0x08007f40
 8007754:	1acb      	subs	r3, r1, r3
 8007756:	f8c8 3000 	str.w	r3, [r8]
 800775a:	462b      	mov	r3, r5
 800775c:	e7df      	b.n	800771e <__kernel_rem_pio2+0x306>
 800775e:	1e62      	subs	r2, r4, #1
 8007760:	ab0c      	add	r3, sp, #48	; 0x30
 8007762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007766:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800776a:	a90c      	add	r1, sp, #48	; 0x30
 800776c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007770:	e738      	b.n	80075e4 <__kernel_rem_pio2+0x1cc>
 8007772:	1e62      	subs	r2, r4, #1
 8007774:	ab0c      	add	r3, sp, #48	; 0x30
 8007776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800777e:	e7f4      	b.n	800776a <__kernel_rem_pio2+0x352>
 8007780:	a90c      	add	r1, sp, #48	; 0x30
 8007782:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007786:	3b01      	subs	r3, #1
 8007788:	430a      	orrs	r2, r1
 800778a:	e788      	b.n	800769e <__kernel_rem_pio2+0x286>
 800778c:	3301      	adds	r3, #1
 800778e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007792:	2900      	cmp	r1, #0
 8007794:	d0fa      	beq.n	800778c <__kernel_rem_pio2+0x374>
 8007796:	9a08      	ldr	r2, [sp, #32]
 8007798:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800779c:	446a      	add	r2, sp
 800779e:	3a98      	subs	r2, #152	; 0x98
 80077a0:	9208      	str	r2, [sp, #32]
 80077a2:	9a06      	ldr	r2, [sp, #24]
 80077a4:	a920      	add	r1, sp, #128	; 0x80
 80077a6:	18a2      	adds	r2, r4, r2
 80077a8:	18e3      	adds	r3, r4, r3
 80077aa:	f104 0801 	add.w	r8, r4, #1
 80077ae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80077b2:	9302      	str	r3, [sp, #8]
 80077b4:	9b02      	ldr	r3, [sp, #8]
 80077b6:	4543      	cmp	r3, r8
 80077b8:	da04      	bge.n	80077c4 <__kernel_rem_pio2+0x3ac>
 80077ba:	461c      	mov	r4, r3
 80077bc:	e6a2      	b.n	8007504 <__kernel_rem_pio2+0xec>
 80077be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077c0:	2301      	movs	r3, #1
 80077c2:	e7e4      	b.n	800778e <__kernel_rem_pio2+0x376>
 80077c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80077ca:	f7f8 fe4f 	bl	800046c <__aeabi_i2d>
 80077ce:	e8e5 0102 	strd	r0, r1, [r5], #8
 80077d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d4:	46ab      	mov	fp, r5
 80077d6:	461c      	mov	r4, r3
 80077d8:	f04f 0900 	mov.w	r9, #0
 80077dc:	2600      	movs	r6, #0
 80077de:	2700      	movs	r7, #0
 80077e0:	9b05      	ldr	r3, [sp, #20]
 80077e2:	4599      	cmp	r9, r3
 80077e4:	dd06      	ble.n	80077f4 <__kernel_rem_pio2+0x3dc>
 80077e6:	9b08      	ldr	r3, [sp, #32]
 80077e8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80077ec:	f108 0801 	add.w	r8, r8, #1
 80077f0:	9308      	str	r3, [sp, #32]
 80077f2:	e7df      	b.n	80077b4 <__kernel_rem_pio2+0x39c>
 80077f4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80077f8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80077fc:	f7f8 fea0 	bl	8000540 <__aeabi_dmul>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4630      	mov	r0, r6
 8007806:	4639      	mov	r1, r7
 8007808:	f7f8 fce4 	bl	80001d4 <__adddf3>
 800780c:	f109 0901 	add.w	r9, r9, #1
 8007810:	4606      	mov	r6, r0
 8007812:	460f      	mov	r7, r1
 8007814:	e7e4      	b.n	80077e0 <__kernel_rem_pio2+0x3c8>
 8007816:	3d01      	subs	r5, #1
 8007818:	e747      	b.n	80076aa <__kernel_rem_pio2+0x292>
 800781a:	ec47 6b10 	vmov	d0, r6, r7
 800781e:	f1ca 0000 	rsb	r0, sl, #0
 8007822:	f000 f949 	bl	8007ab8 <scalbn>
 8007826:	ec57 6b10 	vmov	r6, r7, d0
 800782a:	4ba0      	ldr	r3, [pc, #640]	; (8007aac <__kernel_rem_pio2+0x694>)
 800782c:	ee10 0a10 	vmov	r0, s0
 8007830:	2200      	movs	r2, #0
 8007832:	4639      	mov	r1, r7
 8007834:	f7f9 f90a 	bl	8000a4c <__aeabi_dcmpge>
 8007838:	b1f8      	cbz	r0, 800787a <__kernel_rem_pio2+0x462>
 800783a:	4b9d      	ldr	r3, [pc, #628]	; (8007ab0 <__kernel_rem_pio2+0x698>)
 800783c:	2200      	movs	r2, #0
 800783e:	4630      	mov	r0, r6
 8007840:	4639      	mov	r1, r7
 8007842:	f7f8 fe7d 	bl	8000540 <__aeabi_dmul>
 8007846:	f7f9 f915 	bl	8000a74 <__aeabi_d2iz>
 800784a:	4680      	mov	r8, r0
 800784c:	f7f8 fe0e 	bl	800046c <__aeabi_i2d>
 8007850:	4b96      	ldr	r3, [pc, #600]	; (8007aac <__kernel_rem_pio2+0x694>)
 8007852:	2200      	movs	r2, #0
 8007854:	f7f8 fe74 	bl	8000540 <__aeabi_dmul>
 8007858:	460b      	mov	r3, r1
 800785a:	4602      	mov	r2, r0
 800785c:	4639      	mov	r1, r7
 800785e:	4630      	mov	r0, r6
 8007860:	f7f8 fcb6 	bl	80001d0 <__aeabi_dsub>
 8007864:	f7f9 f906 	bl	8000a74 <__aeabi_d2iz>
 8007868:	1c65      	adds	r5, r4, #1
 800786a:	ab0c      	add	r3, sp, #48	; 0x30
 800786c:	f10a 0a18 	add.w	sl, sl, #24
 8007870:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007874:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007878:	e71f      	b.n	80076ba <__kernel_rem_pio2+0x2a2>
 800787a:	4630      	mov	r0, r6
 800787c:	4639      	mov	r1, r7
 800787e:	f7f9 f8f9 	bl	8000a74 <__aeabi_d2iz>
 8007882:	ab0c      	add	r3, sp, #48	; 0x30
 8007884:	4625      	mov	r5, r4
 8007886:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800788a:	e716      	b.n	80076ba <__kernel_rem_pio2+0x2a2>
 800788c:	ab0c      	add	r3, sp, #48	; 0x30
 800788e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007892:	f7f8 fdeb 	bl	800046c <__aeabi_i2d>
 8007896:	4632      	mov	r2, r6
 8007898:	463b      	mov	r3, r7
 800789a:	f7f8 fe51 	bl	8000540 <__aeabi_dmul>
 800789e:	4642      	mov	r2, r8
 80078a0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80078a4:	464b      	mov	r3, r9
 80078a6:	4630      	mov	r0, r6
 80078a8:	4639      	mov	r1, r7
 80078aa:	f7f8 fe49 	bl	8000540 <__aeabi_dmul>
 80078ae:	3c01      	subs	r4, #1
 80078b0:	4606      	mov	r6, r0
 80078b2:	460f      	mov	r7, r1
 80078b4:	e713      	b.n	80076de <__kernel_rem_pio2+0x2c6>
 80078b6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80078ba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80078be:	f7f8 fe3f 	bl	8000540 <__aeabi_dmul>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4648      	mov	r0, r9
 80078c8:	4651      	mov	r1, sl
 80078ca:	f7f8 fc83 	bl	80001d4 <__adddf3>
 80078ce:	3701      	adds	r7, #1
 80078d0:	4681      	mov	r9, r0
 80078d2:	468a      	mov	sl, r1
 80078d4:	9b00      	ldr	r3, [sp, #0]
 80078d6:	429f      	cmp	r7, r3
 80078d8:	dc02      	bgt.n	80078e0 <__kernel_rem_pio2+0x4c8>
 80078da:	9b06      	ldr	r3, [sp, #24]
 80078dc:	429f      	cmp	r7, r3
 80078de:	ddea      	ble.n	80078b6 <__kernel_rem_pio2+0x49e>
 80078e0:	9a06      	ldr	r2, [sp, #24]
 80078e2:	ab48      	add	r3, sp, #288	; 0x120
 80078e4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80078e8:	e9c6 9a00 	strd	r9, sl, [r6]
 80078ec:	3c01      	subs	r4, #1
 80078ee:	e6fa      	b.n	80076e6 <__kernel_rem_pio2+0x2ce>
 80078f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	dc0b      	bgt.n	800790e <__kernel_rem_pio2+0x4f6>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	dc39      	bgt.n	800796e <__kernel_rem_pio2+0x556>
 80078fa:	d05d      	beq.n	80079b8 <__kernel_rem_pio2+0x5a0>
 80078fc:	9b02      	ldr	r3, [sp, #8]
 80078fe:	f003 0007 	and.w	r0, r3, #7
 8007902:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007906:	ecbd 8b02 	vpop	{d8}
 800790a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007910:	2b03      	cmp	r3, #3
 8007912:	d1f3      	bne.n	80078fc <__kernel_rem_pio2+0x4e4>
 8007914:	9b05      	ldr	r3, [sp, #20]
 8007916:	9500      	str	r5, [sp, #0]
 8007918:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800791c:	eb0d 0403 	add.w	r4, sp, r3
 8007920:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8007924:	46a2      	mov	sl, r4
 8007926:	9b00      	ldr	r3, [sp, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	f1aa 0a08 	sub.w	sl, sl, #8
 800792e:	dc69      	bgt.n	8007a04 <__kernel_rem_pio2+0x5ec>
 8007930:	46aa      	mov	sl, r5
 8007932:	f1ba 0f01 	cmp.w	sl, #1
 8007936:	f1a4 0408 	sub.w	r4, r4, #8
 800793a:	f300 8083 	bgt.w	8007a44 <__kernel_rem_pio2+0x62c>
 800793e:	9c05      	ldr	r4, [sp, #20]
 8007940:	ab48      	add	r3, sp, #288	; 0x120
 8007942:	441c      	add	r4, r3
 8007944:	2000      	movs	r0, #0
 8007946:	2100      	movs	r1, #0
 8007948:	2d01      	cmp	r5, #1
 800794a:	f300 809a 	bgt.w	8007a82 <__kernel_rem_pio2+0x66a>
 800794e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8007952:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007956:	f1bb 0f00 	cmp.w	fp, #0
 800795a:	f040 8098 	bne.w	8007a8e <__kernel_rem_pio2+0x676>
 800795e:	9b04      	ldr	r3, [sp, #16]
 8007960:	e9c3 7800 	strd	r7, r8, [r3]
 8007964:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007968:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800796c:	e7c6      	b.n	80078fc <__kernel_rem_pio2+0x4e4>
 800796e:	9e05      	ldr	r6, [sp, #20]
 8007970:	ab48      	add	r3, sp, #288	; 0x120
 8007972:	441e      	add	r6, r3
 8007974:	462c      	mov	r4, r5
 8007976:	2000      	movs	r0, #0
 8007978:	2100      	movs	r1, #0
 800797a:	2c00      	cmp	r4, #0
 800797c:	da33      	bge.n	80079e6 <__kernel_rem_pio2+0x5ce>
 800797e:	f1bb 0f00 	cmp.w	fp, #0
 8007982:	d036      	beq.n	80079f2 <__kernel_rem_pio2+0x5da>
 8007984:	4602      	mov	r2, r0
 8007986:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800798a:	9c04      	ldr	r4, [sp, #16]
 800798c:	e9c4 2300 	strd	r2, r3, [r4]
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007998:	f7f8 fc1a 	bl	80001d0 <__aeabi_dsub>
 800799c:	ae4a      	add	r6, sp, #296	; 0x128
 800799e:	2401      	movs	r4, #1
 80079a0:	42a5      	cmp	r5, r4
 80079a2:	da29      	bge.n	80079f8 <__kernel_rem_pio2+0x5e0>
 80079a4:	f1bb 0f00 	cmp.w	fp, #0
 80079a8:	d002      	beq.n	80079b0 <__kernel_rem_pio2+0x598>
 80079aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079ae:	4619      	mov	r1, r3
 80079b0:	9b04      	ldr	r3, [sp, #16]
 80079b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80079b6:	e7a1      	b.n	80078fc <__kernel_rem_pio2+0x4e4>
 80079b8:	9c05      	ldr	r4, [sp, #20]
 80079ba:	ab48      	add	r3, sp, #288	; 0x120
 80079bc:	441c      	add	r4, r3
 80079be:	2000      	movs	r0, #0
 80079c0:	2100      	movs	r1, #0
 80079c2:	2d00      	cmp	r5, #0
 80079c4:	da09      	bge.n	80079da <__kernel_rem_pio2+0x5c2>
 80079c6:	f1bb 0f00 	cmp.w	fp, #0
 80079ca:	d002      	beq.n	80079d2 <__kernel_rem_pio2+0x5ba>
 80079cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079d0:	4619      	mov	r1, r3
 80079d2:	9b04      	ldr	r3, [sp, #16]
 80079d4:	e9c3 0100 	strd	r0, r1, [r3]
 80079d8:	e790      	b.n	80078fc <__kernel_rem_pio2+0x4e4>
 80079da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80079de:	f7f8 fbf9 	bl	80001d4 <__adddf3>
 80079e2:	3d01      	subs	r5, #1
 80079e4:	e7ed      	b.n	80079c2 <__kernel_rem_pio2+0x5aa>
 80079e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80079ea:	f7f8 fbf3 	bl	80001d4 <__adddf3>
 80079ee:	3c01      	subs	r4, #1
 80079f0:	e7c3      	b.n	800797a <__kernel_rem_pio2+0x562>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	e7c8      	b.n	800798a <__kernel_rem_pio2+0x572>
 80079f8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80079fc:	f7f8 fbea 	bl	80001d4 <__adddf3>
 8007a00:	3401      	adds	r4, #1
 8007a02:	e7cd      	b.n	80079a0 <__kernel_rem_pio2+0x588>
 8007a04:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a08:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007a0c:	9b00      	ldr	r3, [sp, #0]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	4632      	mov	r2, r6
 8007a14:	463b      	mov	r3, r7
 8007a16:	4640      	mov	r0, r8
 8007a18:	4649      	mov	r1, r9
 8007a1a:	f7f8 fbdb 	bl	80001d4 <__adddf3>
 8007a1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4640      	mov	r0, r8
 8007a28:	4649      	mov	r1, r9
 8007a2a:	f7f8 fbd1 	bl	80001d0 <__aeabi_dsub>
 8007a2e:	4632      	mov	r2, r6
 8007a30:	463b      	mov	r3, r7
 8007a32:	f7f8 fbcf 	bl	80001d4 <__adddf3>
 8007a36:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007a3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007a3e:	ed8a 7b00 	vstr	d7, [sl]
 8007a42:	e770      	b.n	8007926 <__kernel_rem_pio2+0x50e>
 8007a44:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007a48:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	4632      	mov	r2, r6
 8007a50:	463b      	mov	r3, r7
 8007a52:	4649      	mov	r1, r9
 8007a54:	f7f8 fbbe 	bl	80001d4 <__adddf3>
 8007a58:	e9cd 0100 	strd	r0, r1, [sp]
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4640      	mov	r0, r8
 8007a62:	4649      	mov	r1, r9
 8007a64:	f7f8 fbb4 	bl	80001d0 <__aeabi_dsub>
 8007a68:	4632      	mov	r2, r6
 8007a6a:	463b      	mov	r3, r7
 8007a6c:	f7f8 fbb2 	bl	80001d4 <__adddf3>
 8007a70:	ed9d 7b00 	vldr	d7, [sp]
 8007a74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a78:	ed84 7b00 	vstr	d7, [r4]
 8007a7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a80:	e757      	b.n	8007932 <__kernel_rem_pio2+0x51a>
 8007a82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007a86:	f7f8 fba5 	bl	80001d4 <__adddf3>
 8007a8a:	3d01      	subs	r5, #1
 8007a8c:	e75c      	b.n	8007948 <__kernel_rem_pio2+0x530>
 8007a8e:	9b04      	ldr	r3, [sp, #16]
 8007a90:	9a04      	ldr	r2, [sp, #16]
 8007a92:	601f      	str	r7, [r3, #0]
 8007a94:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007a98:	605c      	str	r4, [r3, #4]
 8007a9a:	609d      	str	r5, [r3, #8]
 8007a9c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007aa0:	60d3      	str	r3, [r2, #12]
 8007aa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007aa6:	6110      	str	r0, [r2, #16]
 8007aa8:	6153      	str	r3, [r2, #20]
 8007aaa:	e727      	b.n	80078fc <__kernel_rem_pio2+0x4e4>
 8007aac:	41700000 	.word	0x41700000
 8007ab0:	3e700000 	.word	0x3e700000
 8007ab4:	00000000 	.word	0x00000000

08007ab8 <scalbn>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	ec55 4b10 	vmov	r4, r5, d0
 8007abe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	462b      	mov	r3, r5
 8007ac6:	b999      	cbnz	r1, 8007af0 <scalbn+0x38>
 8007ac8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007acc:	4323      	orrs	r3, r4
 8007ace:	d03f      	beq.n	8007b50 <scalbn+0x98>
 8007ad0:	4b35      	ldr	r3, [pc, #212]	; (8007ba8 <scalbn+0xf0>)
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	ee10 0a10 	vmov	r0, s0
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f7f8 fd31 	bl	8000540 <__aeabi_dmul>
 8007ade:	4b33      	ldr	r3, [pc, #204]	; (8007bac <scalbn+0xf4>)
 8007ae0:	429e      	cmp	r6, r3
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	da10      	bge.n	8007b0a <scalbn+0x52>
 8007ae8:	a327      	add	r3, pc, #156	; (adr r3, 8007b88 <scalbn+0xd0>)
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	e01f      	b.n	8007b30 <scalbn+0x78>
 8007af0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007af4:	4291      	cmp	r1, r2
 8007af6:	d10c      	bne.n	8007b12 <scalbn+0x5a>
 8007af8:	ee10 2a10 	vmov	r2, s0
 8007afc:	4620      	mov	r0, r4
 8007afe:	4629      	mov	r1, r5
 8007b00:	f7f8 fb68 	bl	80001d4 <__adddf3>
 8007b04:	4604      	mov	r4, r0
 8007b06:	460d      	mov	r5, r1
 8007b08:	e022      	b.n	8007b50 <scalbn+0x98>
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007b10:	3936      	subs	r1, #54	; 0x36
 8007b12:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007b16:	4296      	cmp	r6, r2
 8007b18:	dd0d      	ble.n	8007b36 <scalbn+0x7e>
 8007b1a:	2d00      	cmp	r5, #0
 8007b1c:	a11c      	add	r1, pc, #112	; (adr r1, 8007b90 <scalbn+0xd8>)
 8007b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b22:	da02      	bge.n	8007b2a <scalbn+0x72>
 8007b24:	a11c      	add	r1, pc, #112	; (adr r1, 8007b98 <scalbn+0xe0>)
 8007b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b2a:	a319      	add	r3, pc, #100	; (adr r3, 8007b90 <scalbn+0xd8>)
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	f7f8 fd06 	bl	8000540 <__aeabi_dmul>
 8007b34:	e7e6      	b.n	8007b04 <scalbn+0x4c>
 8007b36:	1872      	adds	r2, r6, r1
 8007b38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007b3c:	428a      	cmp	r2, r1
 8007b3e:	dcec      	bgt.n	8007b1a <scalbn+0x62>
 8007b40:	2a00      	cmp	r2, #0
 8007b42:	dd08      	ble.n	8007b56 <scalbn+0x9e>
 8007b44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007b50:	ec45 4b10 	vmov	d0, r4, r5
 8007b54:	bd70      	pop	{r4, r5, r6, pc}
 8007b56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007b5a:	da08      	bge.n	8007b6e <scalbn+0xb6>
 8007b5c:	2d00      	cmp	r5, #0
 8007b5e:	a10a      	add	r1, pc, #40	; (adr r1, 8007b88 <scalbn+0xd0>)
 8007b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b64:	dac0      	bge.n	8007ae8 <scalbn+0x30>
 8007b66:	a10e      	add	r1, pc, #56	; (adr r1, 8007ba0 <scalbn+0xe8>)
 8007b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b6c:	e7bc      	b.n	8007ae8 <scalbn+0x30>
 8007b6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b72:	3236      	adds	r2, #54	; 0x36
 8007b74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	4b0c      	ldr	r3, [pc, #48]	; (8007bb0 <scalbn+0xf8>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	e7d5      	b.n	8007b30 <scalbn+0x78>
 8007b84:	f3af 8000 	nop.w
 8007b88:	c2f8f359 	.word	0xc2f8f359
 8007b8c:	01a56e1f 	.word	0x01a56e1f
 8007b90:	8800759c 	.word	0x8800759c
 8007b94:	7e37e43c 	.word	0x7e37e43c
 8007b98:	8800759c 	.word	0x8800759c
 8007b9c:	fe37e43c 	.word	0xfe37e43c
 8007ba0:	c2f8f359 	.word	0xc2f8f359
 8007ba4:	81a56e1f 	.word	0x81a56e1f
 8007ba8:	43500000 	.word	0x43500000
 8007bac:	ffff3cb0 	.word	0xffff3cb0
 8007bb0:	3c900000 	.word	0x3c900000
 8007bb4:	00000000 	.word	0x00000000

08007bb8 <floor>:
 8007bb8:	ec51 0b10 	vmov	r0, r1, d0
 8007bbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007bc8:	2e13      	cmp	r6, #19
 8007bca:	ee10 5a10 	vmov	r5, s0
 8007bce:	ee10 8a10 	vmov	r8, s0
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	dc31      	bgt.n	8007c3a <floor+0x82>
 8007bd6:	2e00      	cmp	r6, #0
 8007bd8:	da14      	bge.n	8007c04 <floor+0x4c>
 8007bda:	a333      	add	r3, pc, #204	; (adr r3, 8007ca8 <floor+0xf0>)
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f7f8 faf8 	bl	80001d4 <__adddf3>
 8007be4:	2200      	movs	r2, #0
 8007be6:	2300      	movs	r3, #0
 8007be8:	f7f8 ff3a 	bl	8000a60 <__aeabi_dcmpgt>
 8007bec:	b138      	cbz	r0, 8007bfe <floor+0x46>
 8007bee:	2c00      	cmp	r4, #0
 8007bf0:	da53      	bge.n	8007c9a <floor+0xe2>
 8007bf2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007bf6:	4325      	orrs	r5, r4
 8007bf8:	d052      	beq.n	8007ca0 <floor+0xe8>
 8007bfa:	4c2d      	ldr	r4, [pc, #180]	; (8007cb0 <floor+0xf8>)
 8007bfc:	2500      	movs	r5, #0
 8007bfe:	4621      	mov	r1, r4
 8007c00:	4628      	mov	r0, r5
 8007c02:	e024      	b.n	8007c4e <floor+0x96>
 8007c04:	4f2b      	ldr	r7, [pc, #172]	; (8007cb4 <floor+0xfc>)
 8007c06:	4137      	asrs	r7, r6
 8007c08:	ea01 0307 	and.w	r3, r1, r7
 8007c0c:	4303      	orrs	r3, r0
 8007c0e:	d01e      	beq.n	8007c4e <floor+0x96>
 8007c10:	a325      	add	r3, pc, #148	; (adr r3, 8007ca8 <floor+0xf0>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f7f8 fadd 	bl	80001d4 <__adddf3>
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f7f8 ff1f 	bl	8000a60 <__aeabi_dcmpgt>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d0eb      	beq.n	8007bfe <floor+0x46>
 8007c26:	2c00      	cmp	r4, #0
 8007c28:	bfbe      	ittt	lt
 8007c2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007c2e:	4133      	asrlt	r3, r6
 8007c30:	18e4      	addlt	r4, r4, r3
 8007c32:	ea24 0407 	bic.w	r4, r4, r7
 8007c36:	2500      	movs	r5, #0
 8007c38:	e7e1      	b.n	8007bfe <floor+0x46>
 8007c3a:	2e33      	cmp	r6, #51	; 0x33
 8007c3c:	dd0b      	ble.n	8007c56 <floor+0x9e>
 8007c3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007c42:	d104      	bne.n	8007c4e <floor+0x96>
 8007c44:	ee10 2a10 	vmov	r2, s0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	f7f8 fac3 	bl	80001d4 <__adddf3>
 8007c4e:	ec41 0b10 	vmov	d0, r0, r1
 8007c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c56:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007c5a:	f04f 37ff 	mov.w	r7, #4294967295
 8007c5e:	40df      	lsrs	r7, r3
 8007c60:	4238      	tst	r0, r7
 8007c62:	d0f4      	beq.n	8007c4e <floor+0x96>
 8007c64:	a310      	add	r3, pc, #64	; (adr r3, 8007ca8 <floor+0xf0>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fab3 	bl	80001d4 <__adddf3>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2300      	movs	r3, #0
 8007c72:	f7f8 fef5 	bl	8000a60 <__aeabi_dcmpgt>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d0c1      	beq.n	8007bfe <floor+0x46>
 8007c7a:	2c00      	cmp	r4, #0
 8007c7c:	da0a      	bge.n	8007c94 <floor+0xdc>
 8007c7e:	2e14      	cmp	r6, #20
 8007c80:	d101      	bne.n	8007c86 <floor+0xce>
 8007c82:	3401      	adds	r4, #1
 8007c84:	e006      	b.n	8007c94 <floor+0xdc>
 8007c86:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	40b3      	lsls	r3, r6
 8007c8e:	441d      	add	r5, r3
 8007c90:	45a8      	cmp	r8, r5
 8007c92:	d8f6      	bhi.n	8007c82 <floor+0xca>
 8007c94:	ea25 0507 	bic.w	r5, r5, r7
 8007c98:	e7b1      	b.n	8007bfe <floor+0x46>
 8007c9a:	2500      	movs	r5, #0
 8007c9c:	462c      	mov	r4, r5
 8007c9e:	e7ae      	b.n	8007bfe <floor+0x46>
 8007ca0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007ca4:	e7ab      	b.n	8007bfe <floor+0x46>
 8007ca6:	bf00      	nop
 8007ca8:	8800759c 	.word	0x8800759c
 8007cac:	7e37e43c 	.word	0x7e37e43c
 8007cb0:	bff00000 	.word	0xbff00000
 8007cb4:	000fffff 	.word	0x000fffff

08007cb8 <memset>:
 8007cb8:	4402      	add	r2, r0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d100      	bne.n	8007cc2 <memset+0xa>
 8007cc0:	4770      	bx	lr
 8007cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8007cc6:	e7f9      	b.n	8007cbc <memset+0x4>

08007cc8 <__libc_init_array>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	4d0d      	ldr	r5, [pc, #52]	; (8007d00 <__libc_init_array+0x38>)
 8007ccc:	4c0d      	ldr	r4, [pc, #52]	; (8007d04 <__libc_init_array+0x3c>)
 8007cce:	1b64      	subs	r4, r4, r5
 8007cd0:	10a4      	asrs	r4, r4, #2
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	42a6      	cmp	r6, r4
 8007cd6:	d109      	bne.n	8007cec <__libc_init_array+0x24>
 8007cd8:	4d0b      	ldr	r5, [pc, #44]	; (8007d08 <__libc_init_array+0x40>)
 8007cda:	4c0c      	ldr	r4, [pc, #48]	; (8007d0c <__libc_init_array+0x44>)
 8007cdc:	f000 f818 	bl	8007d10 <_init>
 8007ce0:	1b64      	subs	r4, r4, r5
 8007ce2:	10a4      	asrs	r4, r4, #2
 8007ce4:	2600      	movs	r6, #0
 8007ce6:	42a6      	cmp	r6, r4
 8007ce8:	d105      	bne.n	8007cf6 <__libc_init_array+0x2e>
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf0:	4798      	blx	r3
 8007cf2:	3601      	adds	r6, #1
 8007cf4:	e7ee      	b.n	8007cd4 <__libc_init_array+0xc>
 8007cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cfa:	4798      	blx	r3
 8007cfc:	3601      	adds	r6, #1
 8007cfe:	e7f2      	b.n	8007ce6 <__libc_init_array+0x1e>
 8007d00:	08007f98 	.word	0x08007f98
 8007d04:	08007f98 	.word	0x08007f98
 8007d08:	08007f98 	.word	0x08007f98
 8007d0c:	08007f9c 	.word	0x08007f9c

08007d10 <_init>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	bf00      	nop
 8007d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d16:	bc08      	pop	{r3}
 8007d18:	469e      	mov	lr, r3
 8007d1a:	4770      	bx	lr

08007d1c <_fini>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	bf00      	nop
 8007d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d22:	bc08      	pop	{r3}
 8007d24:	469e      	mov	lr, r3
 8007d26:	4770      	bx	lr
